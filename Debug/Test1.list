
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000733c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029bc  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eac  08009eac  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000004ec  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  2000054c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aff7  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000353c  00000000  00000000  0003b087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001470  00000000  00000000  0003fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259fa  00000000  00000000  00040fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e1a  00000000  00000000  000669e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000def45  00000000  00000000  0007f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015e741  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b84  00000000  00000000  0015e794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080074d0 	.word	0x080074d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	080074d0 	.word	0x080074d0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_CAN_RxFifo0MsgPendingCallback>:




void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData);
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000500:	f002 fccf 	bl	8002ea2 <HAL_CAN_GetRxMessage>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200002e4 	.word	0x200002e4
 8000510:	200002c8 	.word	0x200002c8
 8000514:	2000007c 	.word	0x2000007c

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f002 f92f 	bl	8002780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f877 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fb0d 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800052a:	f000 f937 	bl	800079c <MX_DMA2D_Init>
  MX_FMC_Init();
 800052e:	f000 fab9 	bl	8000aa4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000532:	f000 f965 	bl	8000800 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000536:	f000 f9a3 	bl	8000880 <MX_LTDC_Init>
  MX_SPI5_Init();
 800053a:	f000 fa53 	bl	80009e4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800053e:	f000 fa87 	bl	8000a50 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 8000542:	f000 f8d7 	bl	80006f4 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan2);
 8000546:	482a      	ldr	r0, [pc, #168]	; (80005f0 <main+0xd8>)
 8000548:	f002 fb8c 	bl	8002c64 <HAL_CAN_Start>

	  // Activate the notification
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800054c:	2102      	movs	r1, #2
 800054e:	4828      	ldr	r0, [pc, #160]	; (80005f0 <main+0xd8>)
 8000550:	f002 fdb9 	bl	80030c6 <HAL_CAN_ActivateNotification>


	TxHeader.DLC = 8;  // data length
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <main+0xdc>)
 8000556:	2208      	movs	r2, #8
 8000558:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <main+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x407;  // ID
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <main+0xdc>)
 8000562:	f240 4207 	movw	r2, #1031	; 0x407
 8000566:	601a      	str	r2, [r3, #0]

	BSP_LCD_Init();
 8000568:	f001 fb02 	bl	8001b70 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 800056c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000570:	2000      	movs	r0, #0
 8000572:	f001 fb7f 	bl	8001c74 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8000576:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800057a:	2001      	movs	r0, #1
 800057c:	f001 fb7a 	bl	8001c74 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000580:	2001      	movs	r0, #1
 8000582:	f001 fbdb 	bl	8001d3c <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&Font20);
 8000586:	481c      	ldr	r0, [pc, #112]	; (80005f8 <main+0xe0>)
 8000588:	f001 fc00 	bl	8001d8c <BSP_LCD_SetFont>
	BSP_LCD_DisplayOn();
 800058c:	f001 fd42 	bl	8002014 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000590:	481a      	ldr	r0, [pc, #104]	; (80005fc <main+0xe4>)
 8000592:	f001 fc15 	bl	8001dc0 <BSP_LCD_Clear>



	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000596:	481a      	ldr	r0, [pc, #104]	; (8000600 <main+0xe8>)
 8000598:	f001 fbe0 	bl	8001d5c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(1 , 125 ,(uint8_t *) "CAN DATA:",LEFT_MODE);
 800059c:	2303      	movs	r3, #3
 800059e:	4a19      	ldr	r2, [pc, #100]	; (8000604 <main+0xec>)
 80005a0:	217d      	movs	r1, #125	; 0x7d
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fc78 	bl	8001e98 <BSP_LCD_DisplayStringAt>


	uint16_t x = 24;
 80005a8:	2318      	movs	r3, #24
 80005aa:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <main+0xf0>)
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <main+0xf4>)
 80005b0:	4910      	ldr	r1, [pc, #64]	; (80005f4 <main+0xdc>)
 80005b2:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0xd8>)
 80005b4:	f002 fb9a 	bl	8002cec <HAL_CAN_AddTxMessage>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80005b8:	4811      	ldr	r0, [pc, #68]	; (8000600 <main+0xe8>)
 80005ba:	f001 fbcf 	bl	8001d5c <BSP_LCD_SetTextColor>
	  for (uint32_t i = 0; i < 8 ; i ++)
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	e00e      	b.n	80005e2 <main+0xca>
	  {
		  BSP_LCD_DisplayChar (x , 150 , RxData[i]);
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0xf8>)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	781a      	ldrb	r2, [r3, #0]
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	2196      	movs	r1, #150	; 0x96
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc1d 	bl	8001e10 <BSP_LCD_DisplayChar>
		  x+= 24;
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	3318      	adds	r3, #24
 80005da:	80fb      	strh	r3, [r7, #6]
	  for (uint32_t i = 0; i < 8 ; i ++)
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	d9ed      	bls.n	80005c4 <main+0xac>
	  }
	  x = 24;
 80005e8:	2318      	movs	r3, #24
 80005ea:	80fb      	strh	r3, [r7, #6]
	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 80005ec:	e7de      	b.n	80005ac <main+0x94>
 80005ee:	bf00      	nop
 80005f0:	2000007c 	.word	0x2000007c
 80005f4:	200002b0 	.word	0x200002b0
 80005f8:	20000050 	.word	0x20000050
 80005fc:	ff0000ff 	.word	0xff0000ff
 8000600:	ffff0000 	.word	0xffff0000
 8000604:	080074e8 	.word	0x080074e8
 8000608:	200002ec 	.word	0x200002ec
 800060c:	20000000 	.word	0x20000000
 8000610:	200002e4 	.word	0x200002e4

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 ff4c 	bl	80074c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <SystemClock_Config+0xd8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <SystemClock_Config+0xd8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xd8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xdc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <SystemClock_Config+0xdc>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xdc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000684:	2310      	movs	r3, #16
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000688:	23b4      	movs	r3, #180	; 0xb4
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fe49 	bl	8005330 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 faca 	bl	8000c3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f004 fdf2 	bl	8005290 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006b2:	f000 fac3 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2105      	movs	r1, #5
 80006d4:	4618      	mov	r0, r3
 80006d6:	f005 f8a3 	bl	8005820 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e0:	f000 faac 	bl	8000c3c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_CAN2_Init+0xa0>)
 80006fc:	4a26      	ldr	r2, [pc, #152]	; (8000798 <MX_CAN2_Init+0xa4>)
 80006fe:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 15;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000702:	220f      	movs	r2, #15
 8000704:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000710:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000714:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000720:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000724:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_CAN2_Init+0xa0>)
 800072e:	2200      	movs	r2, #0
 8000730:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN2_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_CAN2_Init+0xa0>)
 800074c:	f002 f8ae 	bl	80028ac <HAL_CAN_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_CAN2_Init+0x66>
  {
    Error_Handler();
 8000756:	f000 fa71 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800075e:	2312      	movs	r3, #18
 8000760:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x407<<5;
 8000766:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800076a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x407<<5;
 8000770:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000774:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800077e:	2301      	movs	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
 // canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_CAN2_Init+0xa0>)
 8000788:	f002 f98c 	bl	8002aa4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000007c 	.word	0x2000007c
 8000798:	40006800 	.word	0x40006800

0800079c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <MX_DMA2D_Init+0x60>)
 80007a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007d2:	f003 f99d 	bl	8003b10 <HAL_DMA2D_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007dc:	f000 fa2e 	bl	8000c3c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007e0:	2101      	movs	r1, #1
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_DMA2D_Init+0x5c>)
 80007e4:	f003 fc02 	bl	8003fec <HAL_DMA2D_ConfigLayer>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007ee:	f000 fa25 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000a4 	.word	0x200000a4
 80007fc:	4002b000 	.word	0x4002b000

08000800 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C3_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C3_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C3_Init+0x74>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_I2C3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_I2C3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_I2C3_Init+0x74>)
 800083e:	f003 ffd5 	bl	80047ec <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f9f8 	bl	8000c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C3_Init+0x74>)
 8000850:	f004 f910 	bl	8004a74 <HAL_I2CEx_ConfigAnalogFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800085a:	f000 f9ef 	bl	8000c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_I2C3_Init+0x74>)
 8000862:	f004 f943 	bl	8004aec <HAL_I2CEx_ConfigDigitalFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f9e6 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000e4 	.word	0x200000e4
 8000878:	40005c00 	.word	0x40005c00
 800087c:	000186a0 	.word	0x000186a0

08000880 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09a      	sub	sp, #104	; 0x68
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800088a:	2234      	movs	r2, #52	; 0x34
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f006 fe16 	bl	80074c0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 fe10 	bl	80074c0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008a0:	4b4e      	ldr	r3, [pc, #312]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008a2:	4a4f      	ldr	r2, [pc, #316]	; (80009e0 <MX_LTDC_Init+0x160>)
 80008a4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008a6:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008ac:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008b2:	4b4a      	ldr	r3, [pc, #296]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008b8:	4b48      	ldr	r3, [pc, #288]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008c0:	2209      	movs	r2, #9
 80008c2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008ca:	4b44      	ldr	r3, [pc, #272]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008cc:	221d      	movs	r2, #29
 80008ce:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008d0:	4b42      	ldr	r3, [pc, #264]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008d2:	2203      	movs	r2, #3
 80008d4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008d6:	4b41      	ldr	r3, [pc, #260]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008d8:	f240 120d 	movw	r2, #269	; 0x10d
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008de:	4b3f      	ldr	r3, [pc, #252]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008e0:	f240 1243 	movw	r2, #323	; 0x143
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008e6:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008e8:	f240 1217 	movw	r2, #279	; 0x117
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008f0:	f240 1247 	movw	r2, #327	; 0x147
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <MX_LTDC_Init+0x15c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <MX_LTDC_Init+0x15c>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <MX_LTDC_Init+0x15c>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800090e:	4833      	ldr	r0, [pc, #204]	; (80009dc <MX_LTDC_Init+0x15c>)
 8000910:	f004 f92c 	bl	8004b6c <HAL_LTDC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800091a:	f000 f98f 	bl	8000c3c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800092e:	2300      	movs	r3, #0
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000940:	2305      	movs	r3, #5
 8000942:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	481c      	ldr	r0, [pc, #112]	; (80009dc <MX_LTDC_Init+0x15c>)
 800096c:	f004 fa90 	bl	8004e90 <HAL_LTDC_ConfigLayer>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000976:	f000 f961 	bl	8000c3c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800099c:	2305      	movs	r3, #5
 800099e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_LTDC_Init+0x15c>)
 80009c6:	f004 fa63 	bl	8004e90 <HAL_LTDC_ConfigLayer>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009d0:	f000 f934 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3768      	adds	r7, #104	; 0x68
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000138 	.word	0x20000138
 80009e0:	40016800 	.word	0x40016800

080009e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <MX_SPI5_Init+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI5_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a18:	2218      	movs	r2, #24
 8000a1a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a30:	220a      	movs	r2, #10
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_SPI5_Init+0x64>)
 8000a36:	f005 fb64 	bl	8006102 <HAL_SPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a40:	f000 f8fc 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200001e0 	.word	0x200001e0
 8000a4c:	40015000 	.word	0x40015000

08000a50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART1_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a88:	f006 f91a 	bl	8006cc0 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f8d3 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000238 	.word	0x20000238
 8000aa0:	40011000 	.word	0x40011000

08000aa4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_FMC_Init+0x98>)
 8000abe:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <MX_FMC_Init+0x9c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_FMC_Init+0x98>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_FMC_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_FMC_Init+0x98>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_FMC_Init+0x98>)
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_FMC_Init+0x98>)
 8000adc:	2240      	movs	r2, #64	; 0x40
 8000ade:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_FMC_Init+0x98>)
 8000ae2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ae6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_FMC_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_FMC_Init+0x98>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_FMC_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_FMC_Init+0x98>)
 8000afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b10:	2307      	movs	r3, #7
 8000b12:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b14:	2303      	movs	r3, #3
 8000b16:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_FMC_Init+0x98>)
 8000b26:	f005 fa5b 	bl	8005fe0 <HAL_SDRAM_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b30:	f000 f884 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000027c 	.word	0x2000027c
 8000b40:	a0000140 	.word	0xa0000140

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a39      	ldr	r2, [pc, #228]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_GPIO_Init+0xf4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <HAL_CAN_MspInit+0xc0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d14a      	bne.n	8000d50 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a26      	ldr	r2, [pc, #152]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_CAN_MspInit+0xc4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d20:	2309      	movs	r3, #9
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <HAL_CAN_MspInit+0xc8>)
 8000d2c:	f003 fa8c 	bl	8004248 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	2040      	movs	r0, #64	; 0x40
 8000d36:	f002 fcf6 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d3a:	2040      	movs	r0, #64	; 0x40
 8000d3c:	f002 fd0f 	bl	800375e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 1, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	2041      	movs	r0, #65	; 0x41
 8000d46:	f002 fcee 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d4a:	2041      	movs	r0, #65	; 0x41
 8000d4c:	f002 fd07 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40006800 	.word	0x40006800
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_DMA2D_MspInit+0x48>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_DMA2D_MspInit+0x4c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <HAL_DMA2D_MspInit+0x4c>)
 8000d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_DMA2D_MspInit+0x4c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 2, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	205a      	movs	r0, #90	; 0x5a
 8000d98:	f002 fcc5 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d9c:	205a      	movs	r0, #90	; 0x5a
 8000d9e:	f002 fcde 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	4002b000 	.word	0x4002b000
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_I2C_MspInit+0xc4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d14b      	bne.n	8000e6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e20:	2304      	movs	r3, #4
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <HAL_I2C_MspInit+0xcc>)
 8000e2c:	f003 fa0c 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e36:	2312      	movs	r3, #18
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e42:	2304      	movs	r3, #4
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <HAL_I2C_MspInit+0xd0>)
 8000e4e:	f003 f9fb 	bl	8004248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0xc8>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40005c00 	.word	0x40005c00
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09a      	sub	sp, #104	; 0x68
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	2230      	movs	r2, #48	; 0x30
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fb09 	bl	80074c0 <memset>
  if(hltdc->Instance==LTDC)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a89      	ldr	r2, [pc, #548]	; (80010d8 <HAL_LTDC_MspInit+0x250>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	f040 810a 	bne.w	80010ce <HAL_LTDC_MspInit+0x246>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 52;
 8000ebe:	2334      	movs	r3, #52	; 0x34
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fec6 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000eda:	f7ff feaf 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
 8000ee2:	4b7e      	ldr	r3, [pc, #504]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a7d      	ldr	r2, [pc, #500]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000ee8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	4b77      	ldr	r3, [pc, #476]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a76      	ldr	r2, [pc, #472]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b74      	ldr	r3, [pc, #464]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b70      	ldr	r3, [pc, #448]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a6f      	ldr	r2, [pc, #444]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b6d      	ldr	r3, [pc, #436]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b69      	ldr	r3, [pc, #420]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a68      	ldr	r2, [pc, #416]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b66      	ldr	r3, [pc, #408]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b62      	ldr	r3, [pc, #392]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a61      	ldr	r2, [pc, #388]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b5f      	ldr	r3, [pc, #380]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a5a      	ldr	r2, [pc, #360]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b54      	ldr	r3, [pc, #336]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a53      	ldr	r2, [pc, #332]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b51      	ldr	r3, [pc, #324]	; (80010dc <HAL_LTDC_MspInit+0x254>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb4:	230e      	movs	r3, #14
 8000fb6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4848      	ldr	r0, [pc, #288]	; (80010e0 <HAL_LTDC_MspInit+0x258>)
 8000fc0:	f003 f942 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000fc4:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fc8:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd6:	230e      	movs	r3, #14
 8000fd8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4840      	ldr	r0, [pc, #256]	; (80010e4 <HAL_LTDC_MspInit+0x25c>)
 8000fe2:	f003 f931 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ffe:	4619      	mov	r1, r3
 8001000:	4839      	ldr	r0, [pc, #228]	; (80010e8 <HAL_LTDC_MspInit+0x260>)
 8001002:	f003 f921 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001006:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800100a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001018:	230e      	movs	r3, #14
 800101a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001020:	4619      	mov	r1, r3
 8001022:	4831      	ldr	r0, [pc, #196]	; (80010e8 <HAL_LTDC_MspInit+0x260>)
 8001024:	f003 f910 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001028:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800102c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103a:	230e      	movs	r3, #14
 800103c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001042:	4619      	mov	r1, r3
 8001044:	4829      	ldr	r0, [pc, #164]	; (80010ec <HAL_LTDC_MspInit+0x264>)
 8001046:	f003 f8ff 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800104a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800104e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105c:	230e      	movs	r3, #14
 800105e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001064:	4619      	mov	r1, r3
 8001066:	4822      	ldr	r0, [pc, #136]	; (80010f0 <HAL_LTDC_MspInit+0x268>)
 8001068:	f003 f8ee 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800106c:	2348      	movs	r3, #72	; 0x48
 800106e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107c:	230e      	movs	r3, #14
 800107e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001084:	4619      	mov	r1, r3
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <HAL_LTDC_MspInit+0x26c>)
 8001088:	f003 f8de 	bl	8004248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800108c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800109e:	2309      	movs	r3, #9
 80010a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a6:	4619      	mov	r1, r3
 80010a8:	4810      	ldr	r0, [pc, #64]	; (80010ec <HAL_LTDC_MspInit+0x264>)
 80010aa:	f003 f8cd 	bl	8004248 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 2, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	2058      	movs	r0, #88	; 0x58
 80010b4:	f002 fb37 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b8:	2058      	movs	r0, #88	; 0x58
 80010ba:	f002 fb50 	bl	800375e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 2, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2102      	movs	r1, #2
 80010c2:	2059      	movs	r0, #89	; 0x59
 80010c4:	f002 fb2f 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80010c8:	2059      	movs	r0, #89	; 0x59
 80010ca:	f002 fb48 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3768      	adds	r7, #104	; 0x68
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40016800 	.word	0x40016800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_SPI_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12c      	bne.n	8001174 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_SPI_MspInit+0x88>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_SPI_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001152:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001164:	2305      	movs	r3, #5
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <HAL_SPI_MspInit+0x8c>)
 8001170:	f003 f86a 	bl	8004248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40015000 	.word	0x40015000
 8001180:	40023800 	.word	0x40023800
 8001184:	40021400 	.word	0x40021400

08001188 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_SPI_MspDeInit+0x30>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d10a      	bne.n	80011b0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_SPI_MspDeInit+0x34>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_SPI_MspDeInit+0x34>)
 80011a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80011a6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_SPI_MspDeInit+0x38>)
 80011ac:	f003 f9f8 	bl	80045a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40015000 	.word	0x40015000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021400 	.word	0x40021400

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_UART_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12c      	bne.n	8001240 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x88>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_MspInit+0x88>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_UART_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800121e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001230:	2307      	movs	r3, #7
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0x8c>)
 800123c:	f003 f804 	bl	8004248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40011000 	.word	0x40011000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_FMC_MspInit+0x104>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d16f      	bne.n	8001350 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_FMC_MspInit+0x104>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_FMC_MspInit+0x108>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	4a37      	ldr	r2, [pc, #220]	; (800135c <HAL_FMC_MspInit+0x108>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6393      	str	r3, [r2, #56]	; 0x38
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <HAL_FMC_MspInit+0x108>)
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001292:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001296:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a4:	230c      	movs	r3, #12
 80012a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	482c      	ldr	r0, [pc, #176]	; (8001360 <HAL_FMC_MspInit+0x10c>)
 80012ae:	f002 ffcb 	bl	8004248 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c2:	230c      	movs	r3, #12
 80012c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4826      	ldr	r0, [pc, #152]	; (8001364 <HAL_FMC_MspInit+0x110>)
 80012cc:	f002 ffbc 	bl	8004248 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80012d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80012d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e2:	230c      	movs	r3, #12
 80012e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <HAL_FMC_MspInit+0x114>)
 80012ec:	f002 ffac 	bl	8004248 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012f0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80012f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001302:	230c      	movs	r3, #12
 8001304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <HAL_FMC_MspInit+0x118>)
 800130c:	f002 ff9c 	bl	8004248 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001310:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001314:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001322:	230c      	movs	r3, #12
 8001324:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <HAL_FMC_MspInit+0x11c>)
 800132c:	f002 ff8c 	bl	8004248 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001340:	230c      	movs	r3, #12
 8001342:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <HAL_FMC_MspInit+0x120>)
 800134a:	f002 ff7d 	bl	8004248 <HAL_GPIO_Init>
 800134e:	e000      	b.n	8001352 <HAL_FMC_MspInit+0xfe>
    return;
 8001350:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200002f0 	.word	0x200002f0
 800135c:	40023800 	.word	0x40023800
 8001360:	40021400 	.word	0x40021400
 8001364:	40020800 	.word	0x40020800
 8001368:	40021800 	.word	0x40021800
 800136c:	40021000 	.word	0x40021000
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001380:	f7ff ff68 	bl	8001254 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f001 fa24 	bl	8002824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <CAN2_RX0_IRQHandler+0x10>)
 80013e6:	f001 fe94 	bl	8003112 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000007c 	.word	0x2000007c

080013f4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <CAN2_RX1_IRQHandler+0x10>)
 80013fa:	f001 fe8a 	bl	8003112 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000007c 	.word	0x2000007c

08001408 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <LTDC_IRQHandler+0x10>)
 800140e:	f003 fc7d 	bl	8004d0c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000138 	.word	0x20000138

0800141c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <LTDC_ER_IRQHandler+0x10>)
 8001422:	f003 fc73 	bl	8004d0c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000138 	.word	0x20000138

08001430 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA2D_IRQHandler+0x10>)
 8001436:	f002 fcc8 	bl	8003dca <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000a4 	.word	0x200000a4

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001492:	f7ff ffd7 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f005 ffef 	bl	8007478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f83d 	bl	8000518 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014ac:	08009eb4 	.word	0x08009eb4
  ldr r2, =_sbss
 80014b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014b4:	2000054c 	.word	0x2000054c

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>

080014ba <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80014be:	f000 fa5d 	bl	800197c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80014c2:	20ca      	movs	r0, #202	; 0xca
 80014c4:	f000 f95d 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80014c8:	20c3      	movs	r0, #195	; 0xc3
 80014ca:	f000 f967 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80014ce:	2008      	movs	r0, #8
 80014d0:	f000 f964 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80014d4:	2050      	movs	r0, #80	; 0x50
 80014d6:	f000 f961 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80014da:	20cf      	movs	r0, #207	; 0xcf
 80014dc:	f000 f951 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 f95b 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80014e6:	20c1      	movs	r0, #193	; 0xc1
 80014e8:	f000 f958 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80014ec:	2030      	movs	r0, #48	; 0x30
 80014ee:	f000 f955 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80014f2:	20ed      	movs	r0, #237	; 0xed
 80014f4:	f000 f945 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f000 f94f 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 f94c 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001504:	2012      	movs	r0, #18
 8001506:	f000 f949 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800150a:	2081      	movs	r0, #129	; 0x81
 800150c:	f000 f946 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001510:	20e8      	movs	r0, #232	; 0xe8
 8001512:	f000 f936 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001516:	2085      	movs	r0, #133	; 0x85
 8001518:	f000 f940 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f93d 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 f93a 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001528:	20cb      	movs	r0, #203	; 0xcb
 800152a:	f000 f92a 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800152e:	2039      	movs	r0, #57	; 0x39
 8001530:	f000 f934 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001534:	202c      	movs	r0, #44	; 0x2c
 8001536:	f000 f931 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f92e 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001540:	2034      	movs	r0, #52	; 0x34
 8001542:	f000 f92b 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001546:	2002      	movs	r0, #2
 8001548:	f000 f928 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800154c:	20f7      	movs	r0, #247	; 0xf7
 800154e:	f000 f918 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001552:	2020      	movs	r0, #32
 8001554:	f000 f922 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001558:	20ea      	movs	r0, #234	; 0xea
 800155a:	f000 f912 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f91c 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001564:	2000      	movs	r0, #0
 8001566:	f000 f919 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800156a:	20b1      	movs	r0, #177	; 0xb1
 800156c:	f000 f909 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f913 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001576:	201b      	movs	r0, #27
 8001578:	f000 f910 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800157c:	20b6      	movs	r0, #182	; 0xb6
 800157e:	f000 f900 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001582:	200a      	movs	r0, #10
 8001584:	f000 f90a 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001588:	20a2      	movs	r0, #162	; 0xa2
 800158a:	f000 f907 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800158e:	20c0      	movs	r0, #192	; 0xc0
 8001590:	f000 f8f7 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001594:	2010      	movs	r0, #16
 8001596:	f000 f901 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800159a:	20c1      	movs	r0, #193	; 0xc1
 800159c:	f000 f8f1 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80015a0:	2010      	movs	r0, #16
 80015a2:	f000 f8fb 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80015a6:	20c5      	movs	r0, #197	; 0xc5
 80015a8:	f000 f8eb 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80015ac:	2045      	movs	r0, #69	; 0x45
 80015ae:	f000 f8f5 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80015b2:	2015      	movs	r0, #21
 80015b4:	f000 f8f2 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80015b8:	20c7      	movs	r0, #199	; 0xc7
 80015ba:	f000 f8e2 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80015be:	2090      	movs	r0, #144	; 0x90
 80015c0:	f000 f8ec 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80015c4:	2036      	movs	r0, #54	; 0x36
 80015c6:	f000 f8dc 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80015ca:	20c8      	movs	r0, #200	; 0xc8
 80015cc:	f000 f8e6 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80015d0:	20f2      	movs	r0, #242	; 0xf2
 80015d2:	f000 f8d6 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f8e0 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80015dc:	20b0      	movs	r0, #176	; 0xb0
 80015de:	f000 f8d0 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80015e2:	20c2      	movs	r0, #194	; 0xc2
 80015e4:	f000 f8da 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80015e8:	20b6      	movs	r0, #182	; 0xb6
 80015ea:	f000 f8ca 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 f8d4 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80015f4:	20a7      	movs	r0, #167	; 0xa7
 80015f6:	f000 f8d1 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80015fa:	2027      	movs	r0, #39	; 0x27
 80015fc:	f000 f8ce 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001600:	2004      	movs	r0, #4
 8001602:	f000 f8cb 	bl	800179c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001606:	202a      	movs	r0, #42	; 0x2a
 8001608:	f000 f8bb 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800160c:	2000      	movs	r0, #0
 800160e:	f000 f8c5 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f8c2 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001618:	2000      	movs	r0, #0
 800161a:	f000 f8bf 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800161e:	20ef      	movs	r0, #239	; 0xef
 8001620:	f000 f8bc 	bl	800179c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001624:	202b      	movs	r0, #43	; 0x2b
 8001626:	f000 f8ac 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f8b6 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f8b3 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001636:	2001      	movs	r0, #1
 8001638:	f000 f8b0 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800163c:	203f      	movs	r0, #63	; 0x3f
 800163e:	f000 f8ad 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001642:	20f6      	movs	r0, #246	; 0xf6
 8001644:	f000 f89d 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001648:	2001      	movs	r0, #1
 800164a:	f000 f8a7 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f8a4 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001654:	2006      	movs	r0, #6
 8001656:	f000 f8a1 	bl	800179c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800165a:	202c      	movs	r0, #44	; 0x2c
 800165c:	f000 f891 	bl	8001782 <ili9341_WriteReg>
  LCD_Delay(200);
 8001660:	20c8      	movs	r0, #200	; 0xc8
 8001662:	f000 fa79 	bl	8001b58 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001666:	2026      	movs	r0, #38	; 0x26
 8001668:	f000 f88b 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800166c:	2001      	movs	r0, #1
 800166e:	f000 f895 	bl	800179c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001672:	20e0      	movs	r0, #224	; 0xe0
 8001674:	f000 f885 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001678:	200f      	movs	r0, #15
 800167a:	f000 f88f 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800167e:	2029      	movs	r0, #41	; 0x29
 8001680:	f000 f88c 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001684:	2024      	movs	r0, #36	; 0x24
 8001686:	f000 f889 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800168a:	200c      	movs	r0, #12
 800168c:	f000 f886 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001690:	200e      	movs	r0, #14
 8001692:	f000 f883 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001696:	2009      	movs	r0, #9
 8001698:	f000 f880 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800169c:	204e      	movs	r0, #78	; 0x4e
 800169e:	f000 f87d 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80016a2:	2078      	movs	r0, #120	; 0x78
 80016a4:	f000 f87a 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80016a8:	203c      	movs	r0, #60	; 0x3c
 80016aa:	f000 f877 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80016ae:	2009      	movs	r0, #9
 80016b0:	f000 f874 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80016b4:	2013      	movs	r0, #19
 80016b6:	f000 f871 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80016ba:	2005      	movs	r0, #5
 80016bc:	f000 f86e 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80016c0:	2017      	movs	r0, #23
 80016c2:	f000 f86b 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80016c6:	2011      	movs	r0, #17
 80016c8:	f000 f868 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 f865 	bl	800179c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80016d2:	20e1      	movs	r0, #225	; 0xe1
 80016d4:	f000 f855 	bl	8001782 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 f85f 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80016de:	2016      	movs	r0, #22
 80016e0:	f000 f85c 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80016e4:	201b      	movs	r0, #27
 80016e6:	f000 f859 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80016ea:	2004      	movs	r0, #4
 80016ec:	f000 f856 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80016f0:	2011      	movs	r0, #17
 80016f2:	f000 f853 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80016f6:	2007      	movs	r0, #7
 80016f8:	f000 f850 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80016fc:	2031      	movs	r0, #49	; 0x31
 80016fe:	f000 f84d 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001702:	2033      	movs	r0, #51	; 0x33
 8001704:	f000 f84a 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001708:	2042      	movs	r0, #66	; 0x42
 800170a:	f000 f847 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800170e:	2005      	movs	r0, #5
 8001710:	f000 f844 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001714:	200c      	movs	r0, #12
 8001716:	f000 f841 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800171a:	200a      	movs	r0, #10
 800171c:	f000 f83e 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001720:	2028      	movs	r0, #40	; 0x28
 8001722:	f000 f83b 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001726:	202f      	movs	r0, #47	; 0x2f
 8001728:	f000 f838 	bl	800179c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800172c:	200f      	movs	r0, #15
 800172e:	f000 f835 	bl	800179c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001732:	2011      	movs	r0, #17
 8001734:	f000 f825 	bl	8001782 <ili9341_WriteReg>
  LCD_Delay(200);
 8001738:	20c8      	movs	r0, #200	; 0xc8
 800173a:	f000 fa0d 	bl	8001b58 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800173e:	2029      	movs	r0, #41	; 0x29
 8001740:	f000 f81f 	bl	8001782 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001744:	202c      	movs	r0, #44	; 0x2c
 8001746:	f000 f81c 	bl	8001782 <ili9341_WriteReg>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001752:	f000 f913 	bl	800197c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001756:	2103      	movs	r1, #3
 8001758:	20d3      	movs	r0, #211	; 0xd3
 800175a:	f000 f82c 	bl	80017b6 <ili9341_ReadData>
 800175e:	4603      	mov	r3, r0
 8001760:	b29b      	uxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}

08001766 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800176a:	2029      	movs	r0, #41	; 0x29
 800176c:	f000 f809 	bl	8001782 <ili9341_WriteReg>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001778:	2028      	movs	r0, #40	; 0x28
 800177a:	f000 f802 	bl	8001782 <ili9341_WriteReg>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}

08001782 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f98e 	bl	8001ab0 <LCD_IO_WriteReg>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f95f 	bl	8001a6c <LCD_IO_WriteData>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	460a      	mov	r2, r1
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	4613      	mov	r3, r2
 80017c4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80017c6:	797a      	ldrb	r2, [r7, #5]
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f991 	bl	8001af4 <LCD_IO_ReadData>
 80017d2:	4603      	mov	r3, r0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80017e0:	23f0      	movs	r3, #240	; 0xf0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80017f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <SPIx_Init+0x6c>)
 8001806:	f005 f91c 	bl	8006a42 <HAL_SPI_GetState>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d12b      	bne.n	8001868 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <SPIx_Init+0x6c>)
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <SPIx_Init+0x70>)
 8001814:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <SPIx_Init+0x6c>)
 8001818:	2218      	movs	r2, #24
 800181a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <SPIx_Init+0x6c>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <SPIx_Init+0x6c>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <SPIx_Init+0x6c>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <SPIx_Init+0x6c>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <SPIx_Init+0x6c>)
 8001836:	2207      	movs	r2, #7
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <SPIx_Init+0x6c>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <SPIx_Init+0x6c>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <SPIx_Init+0x6c>)
 8001848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <SPIx_Init+0x6c>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SPIx_Init+0x6c>)
 8001856:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <SPIx_Init+0x6c>)
 800185e:	f000 f853 	bl	8001908 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <SPIx_Init+0x6c>)
 8001864:	f004 fc4d 	bl	8006102 <HAL_SPI_Init>
  } 
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200002f4 	.word	0x200002f4
 8001870:	40015000 	.word	0x40015000

08001874 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <SPIx_Read+0x38>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f107 0108 	add.w	r1, r7, #8
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <SPIx_Read+0x3c>)
 8001890:	f004 fe24 	bl	80064dc <HAL_SPI_Receive>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800189e:	f000 f827 	bl	80018f0 <SPIx_Error>
  }
  
  return readvalue;
 80018a2:	68bb      	ldr	r3, [r7, #8]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000044 	.word	0x20000044
 80018b0:	200002f4 	.word	0x200002f4

080018b4 <SPIx_Write>:
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint16_t Value)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <SPIx_Write+0x34>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1db9      	adds	r1, r7, #6
 80018c8:	2201      	movs	r2, #1
 80018ca:	4808      	ldr	r0, [pc, #32]	; (80018ec <SPIx_Write+0x38>)
 80018cc:	f004 fcca 	bl	8006264 <HAL_SPI_Transmit>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80018da:	f000 f809 	bl	80018f0 <SPIx_Error>
  }
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000044 	.word	0x20000044
 80018ec:	200002f4 	.word	0x200002f4

080018f0 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <SPIx_Error+0x14>)
 80018f6:	f004 fc8d 	bl	8006214 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80018fa:	f7ff ff81 	bl	8001800 <SPIx_Init>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002f4 	.word	0x200002f4

08001908 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <SPIx_MspInit+0x6c>)
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <SPIx_MspInit+0x6c>)
 800191a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800191e:	6453      	str	r3, [r2, #68]	; 0x44
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <SPIx_MspInit+0x6c>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <SPIx_MspInit+0x6c>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <SPIx_MspInit+0x6c>)
 8001936:	f043 0320 	orr.w	r3, r3, #32
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <SPIx_MspInit+0x6c>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001948:	f44f 7360 	mov.w	r3, #896	; 0x380
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001956:	2301      	movs	r3, #1
 8001958:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800195a:	2305      	movs	r3, #5
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <SPIx_MspInit+0x70>)
 8001966:	f002 fc6f 	bl	8004248 <HAL_GPIO_Init>
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40021400 	.word	0x40021400

0800197c <LCD_IO_Init>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <LCD_IO_Init+0xe0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d164      	bne.n	8001a54 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <LCD_IO_Init+0xe0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <LCD_IO_Init+0xe4>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a31      	ldr	r2, [pc, #196]	; (8001a60 <LCD_IO_Init+0xe4>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <LCD_IO_Init+0xe4>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80019ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4619      	mov	r1, r3
 80019c4:	4827      	ldr	r0, [pc, #156]	; (8001a64 <LCD_IO_Init+0xe8>)
 80019c6:	f002 fc3f 	bl	8004248 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <LCD_IO_Init+0xe4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <LCD_IO_Init+0xe4>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <LCD_IO_Init+0xe4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4819      	ldr	r0, [pc, #100]	; (8001a64 <LCD_IO_Init+0xe8>)
 8001a00:	f002 fc22 	bl	8004248 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <LCD_IO_Init+0xe4>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <LCD_IO_Init+0xe4>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <LCD_IO_Init+0xe4>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001a20:	2304      	movs	r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <LCD_IO_Init+0xec>)
 8001a38:	f002 fc06 	bl	8004248 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <LCD_IO_Init+0xec>)
 8001a42:	f002 feb9 	bl	80047b8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001a46:	2201      	movs	r2, #1
 8001a48:	2104      	movs	r1, #4
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <LCD_IO_Init+0xec>)
 8001a4c:	f002 feb4 	bl	80047b8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001a50:	f7ff fed6 	bl	8001800 <SPIx_Init>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000034c 	.word	0x2000034c
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40020800 	.word	0x40020800

08001a6c <LCD_IO_WriteData>:
  * @brief  Writes register value.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <LCD_IO_WriteData+0x3c>)
 8001a7e:	f002 fe9b 	bl	80047b8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001a82:	2200      	movs	r2, #0
 8001a84:	2104      	movs	r1, #4
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <LCD_IO_WriteData+0x40>)
 8001a88:	f002 fe96 	bl	80047b8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff10 	bl	80018b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001a94:	2201      	movs	r2, #1
 8001a96:	2104      	movs	r1, #4
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <LCD_IO_WriteData+0x40>)
 8001a9a:	f002 fe8d 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40020800 	.word	0x40020800

08001ab0 <LCD_IO_WriteReg>:
  * @brief  Writes register address.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac0:	480a      	ldr	r0, [pc, #40]	; (8001aec <LCD_IO_WriteReg+0x3c>)
 8001ac2:	f002 fe79 	bl	80047b8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <LCD_IO_WriteReg+0x40>)
 8001acc:	f002 fe74 	bl	80047b8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff feed 	bl	80018b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ada:	2201      	movs	r2, #1
 8001adc:	2104      	movs	r1, #4
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <LCD_IO_WriteReg+0x40>)
 8001ae0:	f002 fe6a 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40020800 	.word	0x40020800

08001af4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	460a      	mov	r2, r1
 8001afe:	80fb      	strh	r3, [r7, #6]
 8001b00:	4613      	mov	r3, r2
 8001b02:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <LCD_IO_ReadData+0x5c>)
 8001b0e:	f002 fe53 	bl	80047b8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <LCD_IO_ReadData+0x60>)
 8001b1a:	f002 fe4d 	bl	80047b8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fec7 	bl	80018b4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fea3 	bl	8001874 <SPIx_Read>
 8001b2e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b36:	4807      	ldr	r0, [pc, #28]	; (8001b54 <LCD_IO_ReadData+0x60>)
 8001b38:	f002 fe3e 	bl	80047b8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2104      	movs	r1, #4
 8001b40:	4803      	ldr	r0, [pc, #12]	; (8001b50 <LCD_IO_ReadData+0x5c>)
 8001b42:	f002 fe39 	bl	80047b8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fe7f 	bl	8002864 <HAL_Delay>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <BSP_LCD_Init+0xc0>)
 8001b78:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b88:	221d      	movs	r2, #29
 8001b8a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b8e:	2203      	movs	r2, #3
 8001b90:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b94:	f240 120d 	movw	r2, #269	; 0x10d
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001b9c:	f240 1243 	movw	r2, #323	; 0x143
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001ba4:	f240 1217 	movw	r2, #279	; 0x117
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bac:	f240 1247 	movw	r2, #327	; 0x147
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <BSP_LCD_Init+0xc4>)
 8001bcc:	2208      	movs	r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <BSP_LCD_Init+0xc4>)
 8001bd2:	22c0      	movs	r2, #192	; 0xc0
 8001bd4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <BSP_LCD_Init+0xc4>)
 8001bd8:	2204      	movs	r2, #4
 8001bda:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <BSP_LCD_Init+0xc4>)
 8001bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <BSP_LCD_Init+0xc4>)
 8001be6:	f004 f83b 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8001c02:	f000 fa17 	bl	8002034 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <BSP_LCD_Init+0xbc>)
 8001c08:	f002 ffb0 	bl	8004b6c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <BSP_LCD_Init+0xc8>)
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <BSP_LCD_Init+0xcc>)
 8001c10:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <BSP_LCD_Init+0xc8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001c1a:	f000 fbf9 	bl	8002410 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <BSP_LCD_Init+0xd0>)
 8001c20:	f000 f8b4 	bl	8001d8c <BSP_LCD_SetFont>

  return LCD_OK;
 8001c24:	2300      	movs	r3, #0
}  
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000350 	.word	0x20000350
 8001c30:	40016800 	.word	0x40016800
 8001c34:	20000438 	.word	0x20000438
 8001c38:	20000484 	.word	0x20000484
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	20000048 	.word	0x20000048

08001c44 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <BSP_LCD_GetXSize+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	4798      	blx	r3
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000484 	.word	0x20000484

08001c5c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <BSP_LCD_GetYSize+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	4798      	blx	r3
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000484 	.word	0x20000484

08001c74 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b090      	sub	sp, #64	; 0x40
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001c84:	f7ff ffde 	bl	8001c44 <BSP_LCD_GetXSize>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001c90:	f7ff ffe4 	bl	8001c5c <BSP_LCD_GetYSize>
 8001c94:	4603      	mov	r3, r0
 8001c96:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001ca0:	23ff      	movs	r3, #255	; 0xff
 8001ca2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001cba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001cc4:	f7ff ffbe 	bl	8001c44 <BSP_LCD_GetXSize>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001ccc:	f7ff ffc6 	bl	8001c5c <BSP_LCD_GetYSize>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4814      	ldr	r0, [pc, #80]	; (8001d30 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001cde:	f003 f8d7 	bl	8004e90 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001ce2:	88fa      	ldrh	r2, [r7, #6]
 8001ce4:	4913      	ldr	r1, [pc, #76]	; (8001d34 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	490e      	ldr	r1, [pc, #56]	; (8001d34 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	3308      	adds	r3, #8
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001d0a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	4909      	ldr	r1, [pc, #36]	; (8001d34 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001d20:	4803      	ldr	r0, [pc, #12]	; (8001d30 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001d22:	f003 f8f3 	bl	8004f0c <HAL_LTDC_EnableDither>
}
 8001d26:	bf00      	nop
 8001d28:	3740      	adds	r7, #64	; 0x40
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000350 	.word	0x20000350
 8001d34:	2000046c 	.word	0x2000046c
 8001d38:	20000048 	.word	0x20000048

08001d3c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <BSP_LCD_SelectLayer+0x1c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000468 	.word	0x20000468

08001d5c <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <BSP_LCD_SetTextColor+0x28>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <BSP_LCD_SetTextColor+0x2c>)
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000468 	.word	0x20000468
 8001d88:	2000046c 	.word	0x2000046c

08001d8c <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <BSP_LCD_SetFont+0x2c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4908      	ldr	r1, [pc, #32]	; (8001dbc <BSP_LCD_SetFont+0x30>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3308      	adds	r3, #8
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000468 	.word	0x20000468
 8001dbc:	2000046c 	.word	0x2000046c

08001dc0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <BSP_LCD_Clear+0x48>)
 8001dca:	681c      	ldr	r4, [r3, #0]
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <BSP_LCD_Clear+0x48>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <BSP_LCD_Clear+0x4c>)
 8001dd2:	2134      	movs	r1, #52	; 0x34
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	335c      	adds	r3, #92	; 0x5c
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461e      	mov	r6, r3
 8001de0:	f7ff ff30 	bl	8001c44 <BSP_LCD_GetXSize>
 8001de4:	4605      	mov	r5, r0
 8001de6:	f7ff ff39 	bl	8001c5c <BSP_LCD_GetYSize>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	462a      	mov	r2, r5
 8001df8:	4631      	mov	r1, r6
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f000 fad0 	bl	80023a0 <FillBuffer>
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e08:	20000468 	.word	0x20000468
 8001e0c:	20000350 	.word	0x20000350

08001e10 <BSP_LCD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	80bb      	strh	r3, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <BSP_LCD_DisplayChar+0x80>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	491b      	ldr	r1, [pc, #108]	; (8001e94 <BSP_LCD_DisplayChar+0x84>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3308      	adds	r3, #8
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <BSP_LCD_DisplayChar+0x80>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4c14      	ldr	r4, [pc, #80]	; (8001e94 <BSP_LCD_DisplayChar+0x84>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4423      	add	r3, r4
 8001e4e:	3308      	adds	r3, #8
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e54:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <BSP_LCD_DisplayChar+0x80>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4c0d      	ldr	r4, [pc, #52]	; (8001e94 <BSP_LCD_DisplayChar+0x84>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4423      	add	r3, r4
 8001e68:	3308      	adds	r3, #8
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	889b      	ldrh	r3, [r3, #4]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da00      	bge.n	8001e76 <BSP_LCD_DisplayChar+0x66>
 8001e74:	3307      	adds	r3, #7
 8001e76:	10db      	asrs	r3, r3, #3
 8001e78:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e7c:	18ca      	adds	r2, r1, r3
 8001e7e:	88b9      	ldrh	r1, [r7, #4]
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f9d2 	bl	800222c <DrawChar>
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	20000468 	.word	0x20000468
 8001e94:	2000046c 	.word	0x2000046c

08001e98 <BSP_LCD_DisplayStringAt>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	81fb      	strh	r3, [r7, #14]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	81bb      	strh	r3, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	83fb      	strh	r3, [r7, #30]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001ec2:	e002      	b.n	8001eca <BSP_LCD_DisplayStringAt+0x32>
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	617a      	str	r2, [r7, #20]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f6      	bne.n	8001ec4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001ed6:	f7ff feb5 	bl	8001c44 <BSP_LCD_GetXSize>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <BSP_LCD_DisplayStringAt+0x174>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	484b      	ldr	r0, [pc, #300]	; (8002010 <BSP_LCD_DisplayStringAt+0x178>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4403      	add	r3, r0
 8001eec:	3308      	adds	r3, #8
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d01c      	beq.n	8001f38 <BSP_LCD_DisplayStringAt+0xa0>
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	dc33      	bgt.n	8001f6a <BSP_LCD_DisplayStringAt+0xd2>
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d002      	beq.n	8001f0c <BSP_LCD_DisplayStringAt+0x74>
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d019      	beq.n	8001f3e <BSP_LCD_DisplayStringAt+0xa6>
 8001f0a:	e02e      	b.n	8001f6a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad1      	subs	r1, r2, r3
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <BSP_LCD_DisplayStringAt+0x174>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	483e      	ldr	r0, [pc, #248]	; (8002010 <BSP_LCD_DisplayStringAt+0x178>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4403      	add	r3, r0
 8001f22:	3308      	adds	r3, #8
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	4413      	add	r3, r2
 8001f34:	83fb      	strh	r3, [r7, #30]
      break;
 8001f36:	e01b      	b.n	8001f70 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001f38:	89fb      	ldrh	r3, [r7, #14]
 8001f3a:	83fb      	strh	r3, [r7, #30]
      break;
 8001f3c:	e018      	b.n	8001f70 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b299      	uxth	r1, r3
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <BSP_LCD_DisplayStringAt+0x174>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4831      	ldr	r0, [pc, #196]	; (8002010 <BSP_LCD_DisplayStringAt+0x178>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4403      	add	r3, r0
 8001f56:	3308      	adds	r3, #8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	fb11 f303 	smulbb	r3, r1, r3
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	4413      	add	r3, r2
 8001f66:	83fb      	strh	r3, [r7, #30]
      break;
 8001f68:	e002      	b.n	8001f70 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	83fb      	strh	r3, [r7, #30]
      break;
 8001f6e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001f70:	e01a      	b.n	8001fa8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	89b9      	ldrh	r1, [r7, #12]
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff48 	bl	8001e10 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <BSP_LCD_DisplayStringAt+0x174>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4922      	ldr	r1, [pc, #136]	; (8002010 <BSP_LCD_DisplayStringAt+0x178>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3308      	adds	r3, #8
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	889a      	ldrh	r2, [r3, #4]
 8001f96:	8bfb      	ldrh	r3, [r7, #30]
 8001f98:	4413      	add	r3, r2
 8001f9a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
    i++;
 8001fa2:	8bbb      	ldrh	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2dc      	uxtb	r4, r3
 8001fb6:	f7ff fe45 	bl	8001c44 <BSP_LCD_GetXSize>
 8001fba:	8bb9      	ldrh	r1, [r7, #28]
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <BSP_LCD_DisplayStringAt+0x174>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4d13      	ldr	r5, [pc, #76]	; (8002010 <BSP_LCD_DisplayStringAt+0x178>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	442b      	add	r3, r5
 8001fcc:	3308      	adds	r3, #8
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	889b      	ldrh	r3, [r3, #4]
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	1ac3      	subs	r3, r0, r3
 8001fd8:	b299      	uxth	r1, r3
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <BSP_LCD_DisplayStringAt+0x174>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <BSP_LCD_DisplayStringAt+0x178>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4403      	add	r3, r0
 8001fea:	3308      	adds	r3, #8
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	889b      	ldrh	r3, [r3, #4]
 8001ff0:	4299      	cmp	r1, r3
 8001ff2:	bf2c      	ite	cs
 8001ff4:	2301      	movcs	r3, #1
 8001ff6:	2300      	movcc	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4023      	ands	r3, r4
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1b7      	bne.n	8001f72 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bdb0      	pop	{r4, r5, r7, pc}
 800200c:	20000468 	.word	0x20000468
 8002010:	2000046c 	.word	0x2000046c

08002014 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <BSP_LCD_DisplayOn+0x1c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002022:	4b03      	ldr	r3, [pc, #12]	; (8002030 <BSP_LCD_DisplayOn+0x1c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4798      	blx	r3
  }
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000484 	.word	0x20000484

08002034 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08e      	sub	sp, #56	; 0x38
 8002038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <MspInit+0x190>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a60      	ldr	r2, [pc, #384]	; (80021c4 <MspInit+0x190>)
 8002044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <MspInit+0x190>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <MspInit+0x190>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <MspInit+0x190>)
 8002060:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <MspInit+0x190>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <MspInit+0x190>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <MspInit+0x190>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <MspInit+0x190>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <MspInit+0x190>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <MspInit+0x190>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <MspInit+0x190>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <MspInit+0x190>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <MspInit+0x190>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <MspInit+0x190>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <MspInit+0x190>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a3d      	ldr	r2, [pc, #244]	; (80021c4 <MspInit+0x190>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <MspInit+0x190>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <MspInit+0x190>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <MspInit+0x190>)
 80020ec:	f043 0320 	orr.w	r3, r3, #32
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <MspInit+0x190>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <MspInit+0x190>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <MspInit+0x190>)
 8002108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <MspInit+0x190>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800211a:	f641 0358 	movw	r3, #6232	; 0x1858
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800212c:	230e      	movs	r3, #14
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4824      	ldr	r0, [pc, #144]	; (80021c8 <MspInit+0x194>)
 8002138:	f002 f886 	bl	8004248 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800213c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	4820      	ldr	r0, [pc, #128]	; (80021cc <MspInit+0x198>)
 800214a:	f002 f87d 	bl	8004248 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800214e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	481d      	ldr	r0, [pc, #116]	; (80021d0 <MspInit+0x19c>)
 800215c:	f002 f874 	bl	8004248 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002160:	2348      	movs	r3, #72	; 0x48
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	481a      	ldr	r0, [pc, #104]	; (80021d4 <MspInit+0x1a0>)
 800216c:	f002 f86c 	bl	8004248 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	4816      	ldr	r0, [pc, #88]	; (80021d8 <MspInit+0x1a4>)
 800217e:	f002 f863 	bl	8004248 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002182:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	4813      	ldr	r0, [pc, #76]	; (80021dc <MspInit+0x1a8>)
 8002190:	f002 f85a 	bl	8004248 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002194:	2303      	movs	r3, #3
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002198:	2309      	movs	r3, #9
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	480a      	ldr	r0, [pc, #40]	; (80021cc <MspInit+0x198>)
 80021a4:	f002 f850 	bl	8004248 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80021a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4809      	ldr	r0, [pc, #36]	; (80021dc <MspInit+0x1a8>)
 80021b6:	f002 f847 	bl	8004248 <HAL_GPIO_Init>
}
 80021ba:	bf00      	nop
 80021bc:	3738      	adds	r7, #56	; 0x38
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021400 	.word	0x40021400
 80021dc:	40021800 	.word	0x40021800

080021e0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	603a      	str	r2, [r7, #0]
 80021ea:	80fb      	strh	r3, [r7, #6]
 80021ec:	460b      	mov	r3, r1
 80021ee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <BSP_LCD_DrawPixel+0x44>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <BSP_LCD_DrawPixel+0x48>)
 80021f6:	2134      	movs	r1, #52	; 0x34
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	335c      	adds	r3, #92	; 0x5c
 8002200:	681c      	ldr	r4, [r3, #0]
 8002202:	88bd      	ldrh	r5, [r7, #4]
 8002204:	f7ff fd1e 	bl	8001c44 <BSP_LCD_GetXSize>
 8002208:	4603      	mov	r3, r0
 800220a:	fb03 f205 	mul.w	r2, r3, r5
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4423      	add	r3, r4
 8002216:	461a      	mov	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bdb0      	pop	{r4, r5, r7, pc}
 8002224:	20000468 	.word	0x20000468
 8002228:	20000350 	.word	0x20000350

0800222c <DrawChar>:
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	603a      	str	r2, [r7, #0]
 8002236:	80fb      	strh	r3, [r7, #6]
 8002238:	460b      	mov	r3, r1
 800223a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <DrawChar+0x16c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4953      	ldr	r1, [pc, #332]	; (800239c <DrawChar+0x170>)
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3308      	adds	r3, #8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	88db      	ldrh	r3, [r3, #6]
 800225e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <DrawChar+0x16c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <DrawChar+0x170>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3308      	adds	r3, #8
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002278:	8a3b      	ldrh	r3, [r7, #16]
 800227a:	3307      	adds	r3, #7
 800227c:	2b00      	cmp	r3, #0
 800227e:	da00      	bge.n	8002282 <DrawChar+0x56>
 8002280:	3307      	adds	r3, #7
 8002282:	10db      	asrs	r3, r3, #3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	b2da      	uxtb	r2, r3
 800228a:	8a3b      	ldrh	r3, [r7, #16]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e076      	b.n	8002386 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002298:	8a3b      	ldrh	r3, [r7, #16]
 800229a:	3307      	adds	r3, #7
 800229c:	2b00      	cmp	r3, #0
 800229e:	da00      	bge.n	80022a2 <DrawChar+0x76>
 80022a0:	3307      	adds	r3, #7
 80022a2:	10db      	asrs	r3, r3, #3
 80022a4:	461a      	mov	r2, r3
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80022b2:	8a3b      	ldrh	r3, [r7, #16]
 80022b4:	3307      	adds	r3, #7
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da00      	bge.n	80022bc <DrawChar+0x90>
 80022ba:	3307      	adds	r3, #7
 80022bc:	10db      	asrs	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d002      	beq.n	80022c8 <DrawChar+0x9c>
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d004      	beq.n	80022d0 <DrawChar+0xa4>
 80022c6:	e00c      	b.n	80022e2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	e016      	b.n	80022fe <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	3201      	adds	r2, #1
 80022da:	7812      	ldrb	r2, [r2, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
      break;
 80022e0:	e00d      	b.n	80022fe <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3301      	adds	r3, #1
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	4313      	orrs	r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	3202      	adds	r2, #2
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
      break;
 80022fc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e036      	b.n	8002372 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002304:	8a3a      	ldrh	r2, [r7, #16]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	4413      	add	r3, r2
 800230e:	3b01      	subs	r3, #1
 8002310:	2201      	movs	r2, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	461a      	mov	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d012      	beq.n	8002346 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	b29a      	uxth	r2, r3
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4413      	add	r3, r2
 8002328:	b298      	uxth	r0, r3
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <DrawChar+0x16c>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <DrawChar+0x170>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff ff4e 	bl	80021e0 <BSP_LCD_DrawPixel>
 8002344:	e012      	b.n	800236c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	b29a      	uxth	r2, r3
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	4413      	add	r3, r2
 800234e:	b298      	uxth	r0, r3
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <DrawChar+0x16c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4911      	ldr	r1, [pc, #68]	; (800239c <DrawChar+0x170>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3304      	adds	r3, #4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	88bb      	ldrh	r3, [r7, #4]
 8002366:	4619      	mov	r1, r3
 8002368:	f7ff ff3a 	bl	80021e0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	3301      	adds	r3, #1
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	8a3b      	ldrh	r3, [r7, #16]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3c4      	bcc.n	8002304 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800237a:	88bb      	ldrh	r3, [r7, #4]
 800237c:	3301      	adds	r3, #1
 800237e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	3301      	adds	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	8a7b      	ldrh	r3, [r7, #18]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	429a      	cmp	r2, r3
 800238c:	d384      	bcc.n	8002298 <DrawChar+0x6c>
  }
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000468 	.word	0x20000468
 800239c:	2000046c 	.word	0x2000046c

080023a0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <FillBuffer+0x68>)
 80023b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023b4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <FillBuffer+0x68>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <FillBuffer+0x68>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <FillBuffer+0x68>)
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <FillBuffer+0x6c>)
 80023c6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80023c8:	480f      	ldr	r0, [pc, #60]	; (8002408 <FillBuffer+0x68>)
 80023ca:	f001 fba1 	bl	8003b10 <HAL_DMA2D_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d115      	bne.n	8002400 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	480c      	ldr	r0, [pc, #48]	; (8002408 <FillBuffer+0x68>)
 80023d8:	f001 fe08 	bl	8003fec <HAL_DMA2D_ConfigLayer>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69f9      	ldr	r1, [r7, #28]
 80023ec:	4806      	ldr	r0, [pc, #24]	; (8002408 <FillBuffer+0x68>)
 80023ee:	f001 fbd8 	bl	8003ba2 <HAL_DMA2D_Start>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80023f8:	210a      	movs	r1, #10
 80023fa:	4803      	ldr	r0, [pc, #12]	; (8002408 <FillBuffer+0x68>)
 80023fc:	f001 fbfc 	bl	8003bf8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200003f8 	.word	0x200003f8
 800240c:	4002b000 	.word	0x4002b000

08002410 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <BSP_SDRAM_Init+0x94>)
 8002418:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 800241c:	2202      	movs	r2, #2
 800241e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 8002422:	2207      	movs	r2, #7
 8002424:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 8002428:	2204      	movs	r2, #4
 800242a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 800242e:	2207      	movs	r2, #7
 8002430:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 8002434:	2202      	movs	r2, #2
 8002436:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 800243a:	2202      	movs	r2, #2
 800243c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 8002440:	2202      	movs	r2, #2
 8002442:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002446:	2201      	movs	r2, #1
 8002448:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002452:	2204      	movs	r2, #4
 8002454:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002458:	2210      	movs	r2, #16
 800245a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002464:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002468:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002476:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 8002480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8002486:	f000 f871 	bl	800256c <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 800248a:	4907      	ldr	r1, [pc, #28]	; (80024a8 <BSP_SDRAM_Init+0x98>)
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <BSP_SDRAM_Init+0x90>)
 800248e:	f003 fda7 	bl	8005fe0 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002492:	f240 506a 	movw	r0, #1386	; 0x56a
 8002496:	f000 f809 	bl	80024ac <BSP_SDRAM_Initialization_sequence>
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000488 	.word	0x20000488
 80024a4:	a0000140 	.word	0xa0000140
 80024a8:	200004bc 	.word	0x200004bc

080024ac <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024c0:	2208      	movs	r2, #8
 80024c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80024d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d4:	4923      	ldr	r1, [pc, #140]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024d6:	4824      	ldr	r0, [pc, #144]	; (8002568 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80024d8:	f003 fdb6 	bl	8006048 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80024dc:	2001      	movs	r0, #1
 80024de:	f000 f9c1 	bl	8002864 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024ea:	2208      	movs	r2, #8
 80024ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80024fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fe:	4919      	ldr	r1, [pc, #100]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002500:	4819      	ldr	r0, [pc, #100]	; (8002568 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002502:	f003 fda1 	bl	8006048 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002508:	2203      	movs	r2, #3
 800250a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800250e:	2208      	movs	r2, #8
 8002510:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002514:	2204      	movs	r2, #4
 8002516:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800251e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002522:	4910      	ldr	r1, [pc, #64]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002524:	4810      	ldr	r0, [pc, #64]	; (8002568 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002526:	f003 fd8f 	bl	8006048 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800252a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800252e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002532:	2204      	movs	r2, #4
 8002534:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002538:	2208      	movs	r2, #8
 800253a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800253e:	2201      	movs	r2, #1
 8002540:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002546:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254c:	4905      	ldr	r1, [pc, #20]	; (8002564 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002550:	f003 fd7a 	bl	8006048 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4804      	ldr	r0, [pc, #16]	; (8002568 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002558:	f003 fdab 	bl	80060b2 <HAL_SDRAM_ProgramRefreshRate>
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200004d8 	.word	0x200004d8
 8002568:	20000488 	.word	0x20000488

0800256c <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8002572:	4b79      	ldr	r3, [pc, #484]	; (8002758 <MspInit+0x1ec>)
 8002574:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	4b78      	ldr	r3, [pc, #480]	; (800275c <MspInit+0x1f0>)
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	4a77      	ldr	r2, [pc, #476]	; (800275c <MspInit+0x1f0>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6393      	str	r3, [r2, #56]	; 0x38
 8002586:	4b75      	ldr	r3, [pc, #468]	; (800275c <MspInit+0x1f0>)
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	4b71      	ldr	r3, [pc, #452]	; (800275c <MspInit+0x1f0>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a70      	ldr	r2, [pc, #448]	; (800275c <MspInit+0x1f0>)
 800259c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b6e      	ldr	r3, [pc, #440]	; (800275c <MspInit+0x1f0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	4b6a      	ldr	r3, [pc, #424]	; (800275c <MspInit+0x1f0>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a69      	ldr	r2, [pc, #420]	; (800275c <MspInit+0x1f0>)
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b67      	ldr	r3, [pc, #412]	; (800275c <MspInit+0x1f0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <MspInit+0x1f0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a62      	ldr	r2, [pc, #392]	; (800275c <MspInit+0x1f0>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b60      	ldr	r3, [pc, #384]	; (800275c <MspInit+0x1f0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <MspInit+0x1f0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a5b      	ldr	r2, [pc, #364]	; (800275c <MspInit+0x1f0>)
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b59      	ldr	r3, [pc, #356]	; (800275c <MspInit+0x1f0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b55      	ldr	r3, [pc, #340]	; (800275c <MspInit+0x1f0>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a54      	ldr	r2, [pc, #336]	; (800275c <MspInit+0x1f0>)
 800260c:	f043 0310 	orr.w	r3, r3, #16
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b52      	ldr	r3, [pc, #328]	; (800275c <MspInit+0x1f0>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b4e      	ldr	r3, [pc, #312]	; (800275c <MspInit+0x1f0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a4d      	ldr	r2, [pc, #308]	; (800275c <MspInit+0x1f0>)
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b4b      	ldr	r3, [pc, #300]	; (800275c <MspInit+0x1f0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <MspInit+0x1f0>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a46      	ldr	r2, [pc, #280]	; (800275c <MspInit+0x1f0>)
 8002644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b44      	ldr	r3, [pc, #272]	; (800275c <MspInit+0x1f0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800265a:	2302      	movs	r3, #2
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002662:	230c      	movs	r3, #12
 8002664:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002666:	2360      	movs	r3, #96	; 0x60
 8002668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800266a:	f107 0320 	add.w	r3, r7, #32
 800266e:	4619      	mov	r1, r3
 8002670:	483b      	ldr	r0, [pc, #236]	; (8002760 <MspInit+0x1f4>)
 8002672:	f001 fde9 	bl	8004248 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002676:	2301      	movs	r3, #1
 8002678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800267a:	f107 0320 	add.w	r3, r7, #32
 800267e:	4619      	mov	r1, r3
 8002680:	4838      	ldr	r0, [pc, #224]	; (8002764 <MspInit+0x1f8>)
 8002682:	f001 fde1 	bl	8004248 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002686:	f24c 7303 	movw	r3, #50947	; 0xc703
 800268a:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800268c:	f107 0320 	add.w	r3, r7, #32
 8002690:	4619      	mov	r1, r3
 8002692:	4835      	ldr	r0, [pc, #212]	; (8002768 <MspInit+0x1fc>)
 8002694:	f001 fdd8 	bl	8004248 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002698:	f64f 7383 	movw	r3, #65411	; 0xff83
 800269c:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800269e:	f107 0320 	add.w	r3, r7, #32
 80026a2:	4619      	mov	r1, r3
 80026a4:	4831      	ldr	r0, [pc, #196]	; (800276c <MspInit+0x200>)
 80026a6:	f001 fdcf 	bl	8004248 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80026aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026ae:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	4619      	mov	r1, r3
 80026b6:	482e      	ldr	r0, [pc, #184]	; (8002770 <MspInit+0x204>)
 80026b8:	f001 fdc6 	bl	8004248 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80026bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80026c0:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	4619      	mov	r1, r3
 80026c8:	482a      	ldr	r0, [pc, #168]	; (8002774 <MspInit+0x208>)
 80026ca:	f001 fdbd 	bl	8004248 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <MspInit+0x20c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <MspInit+0x20c>)
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <MspInit+0x20c>)
 80026dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <MspInit+0x20c>)
 80026e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <MspInit+0x20c>)
 80026ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026f0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <MspInit+0x20c>)
 80026f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026f8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MspInit+0x20c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <MspInit+0x20c>)
 8002702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002706:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <MspInit+0x20c>)
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MspInit+0x20c>)
 8002710:	2203      	movs	r2, #3
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MspInit+0x20c>)
 8002716:	2200      	movs	r2, #0
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MspInit+0x20c>)
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MspInit+0x20c>)
 8002722:	4a16      	ldr	r2, [pc, #88]	; (800277c <MspInit+0x210>)
 8002724:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <MspInit+0x20c>)
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
 800272c:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MspInit+0x20c>)
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002732:	4811      	ldr	r0, [pc, #68]	; (8002778 <MspInit+0x20c>)
 8002734:	f001 f8dc 	bl	80038f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002738:	480f      	ldr	r0, [pc, #60]	; (8002778 <MspInit+0x20c>)
 800273a:	f001 f82b 	bl	8003794 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2038      	movs	r0, #56	; 0x38
 8002744:	f000 ffef 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002748:	2038      	movs	r0, #56	; 0x38
 800274a:	f001 f808 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3738      	adds	r7, #56	; 0x38
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000488 	.word	0x20000488
 800275c:	40023800 	.word	0x40023800
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	200004e8 	.word	0x200004e8
 800277c:	40026410 	.word	0x40026410

08002780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_Init+0x40>)
 800278a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_Init+0x40>)
 8002796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_Init+0x40>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f000 ffb1 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f808 	bl	80027c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b4:	f7fe fa48 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00

080027c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x54>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x58>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 ffc9 	bl	800377a <HAL_SYSTICK_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00e      	b.n	8002810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d80a      	bhi.n	800280e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f000 ff91 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002804:	4a06      	ldr	r2, [pc, #24]	; (8002820 <HAL_InitTick+0x5c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000008 	.word	0x20000008
 800281c:	2000005c 	.word	0x2000005c
 8002820:	20000058 	.word	0x20000058

08002824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x20>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x24>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_IncTick+0x24>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000005c 	.word	0x2000005c
 8002848:	20000548 	.word	0x20000548

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000548 	.word	0x20000548

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff ffee 	bl	800284c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_Delay+0x44>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288a:	bf00      	nop
 800288c:	f7ff ffde 	bl	800284c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000005c 	.word	0x2000005c

080028ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0ed      	b.n	8002a9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe f9e4 	bl	8000c98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e0:	f7ff ffb4 	bl	800284c <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028e6:	e012      	b.n	800290e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e8:	f7ff ffb0 	bl	800284c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b0a      	cmp	r3, #10
 80028f4:	d90b      	bls.n	800290e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2205      	movs	r2, #5
 8002906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0c5      	b.n	8002a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0e5      	beq.n	80028e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0202 	bic.w	r2, r2, #2
 800292a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7ff ff8e 	bl	800284c <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002932:	e012      	b.n	800295a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002934:	f7ff ff8a 	bl	800284c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b0a      	cmp	r3, #10
 8002940:	d90b      	bls.n	800295a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e09f      	b.n	8002a9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e5      	bne.n	8002934 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7e1b      	ldrb	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e007      	b.n	8002992 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7e5b      	ldrb	r3, [r3, #25]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e007      	b.n	80029bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7e9b      	ldrb	r3, [r3, #26]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e007      	b.n	80029e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0220 	bic.w	r2, r2, #32
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7edb      	ldrb	r3, [r3, #27]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0210 	bic.w	r2, r2, #16
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e007      	b.n	8002a10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0210 	orr.w	r2, r2, #16
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7f1b      	ldrb	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d108      	bne.n	8002a2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e007      	b.n	8002a3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7f5b      	ldrb	r3, [r3, #29]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0204 	orr.w	r2, r2, #4
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e007      	b.n	8002a64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d003      	beq.n	8002aca <HAL_CAN_ConfigFilter+0x26>
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 80be 	bne.w	8002c46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_CAN_ConfigFilter+0x1bc>)
 8002acc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ae4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	431a      	orrs	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d123      	bne.n	8002b74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3248      	adds	r2, #72	; 0x48
 8002b54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6a:	6979      	ldr	r1, [r7, #20]
 8002b6c:	3348      	adds	r3, #72	; 0x48
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d122      	bne.n	8002bc2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3248      	adds	r2, #72	; 0x48
 8002ba2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb8:	6979      	ldr	r1, [r7, #20]
 8002bba:	3348      	adds	r3, #72	; 0x48
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bdc:	e007      	b.n	8002bee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c08:	e007      	b.n	8002c1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c38:	f023 0201 	bic.w	r2, r3, #1
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e006      	b.n	8002c54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40006400 	.word	0x40006400

08002c64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d12e      	bne.n	8002cd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c90:	f7ff fddc 	bl	800284c <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c96:	e012      	b.n	8002cbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c98:	f7ff fdd8 	bl	800284c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b0a      	cmp	r3, #10
 8002ca4:	d90b      	bls.n	8002cbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2205      	movs	r2, #5
 8002cb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e012      	b.n	8002ce4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e5      	bne.n	8002c98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e006      	b.n	8002ce4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d003      	beq.n	8002d18 <HAL_CAN_AddTxMessage+0x2c>
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	f040 80b8 	bne.w	8002e88 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80a0 	beq.w	8002e78 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	0e1b      	lsrs	r3, r3, #24
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d907      	bls.n	8002d58 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e09e      	b.n	8002e96 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	440b      	add	r3, r1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e00f      	b.n	8002da6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	440b      	add	r3, r1
 8002da4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3318      	adds	r3, #24
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	440b      	add	r3, r1
 8002db6:	3304      	adds	r3, #4
 8002db8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	7d1b      	ldrb	r3, [r3, #20]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d111      	bne.n	8002de6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3318      	adds	r3, #24
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	440b      	add	r3, r1
 8002de2:	3304      	adds	r3, #4
 8002de4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3307      	adds	r3, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	061a      	lsls	r2, r3, #24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3306      	adds	r3, #6
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3305      	adds	r3, #5
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	4313      	orrs	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	3204      	adds	r2, #4
 8002e06:	7812      	ldrb	r2, [r2, #0]
 8002e08:	4610      	mov	r0, r2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6811      	ldr	r1, [r2, #0]
 8002e0e:	ea43 0200 	orr.w	r2, r3, r0
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	440b      	add	r3, r1
 8002e18:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3303      	adds	r3, #3
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	061a      	lsls	r2, r3, #24
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3301      	adds	r3, #1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	4610      	mov	r0, r2
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	6811      	ldr	r1, [r2, #0]
 8002e44:	ea43 0200 	orr.w	r2, r3, r0
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	4413      	add	r3, r2
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	6811      	ldr	r1, [r2, #0]
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	440b      	add	r3, r1
 8002e72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e00e      	b.n	8002e96 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e006      	b.n	8002e96 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d003      	beq.n	8002ec6 <HAL_CAN_GetRxMessage+0x24>
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	f040 80f3 	bne.w	80030ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10e      	bne.n	8002eea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0e7      	b.n	80030ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d8      	b.n	80030ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	331b      	adds	r3, #27
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	4413      	add	r3, r2
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0204 	and.w	r2, r3, #4
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	331b      	adds	r3, #27
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	4413      	add	r3, r2
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0d5b      	lsrs	r3, r3, #21
 8002f36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	331b      	adds	r3, #27
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	08db      	lsrs	r3, r3, #3
 8002f50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	331b      	adds	r3, #27
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	4413      	add	r3, r2
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0202 	and.w	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	331b      	adds	r3, #27
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	3304      	adds	r3, #4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	331b      	adds	r3, #27
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0a1a      	lsrs	r2, r3, #8
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0c1a      	lsrs	r2, r3, #16
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	4413      	add	r3, r2
 800300a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e1a      	lsrs	r2, r3, #24
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	3303      	adds	r3, #3
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	4413      	add	r3, r2
 8003024:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	4413      	add	r3, r2
 800303c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	0a1a      	lsrs	r2, r3, #8
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	3305      	adds	r3, #5
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	4413      	add	r3, r2
 8003056:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0c1a      	lsrs	r2, r3, #16
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	3306      	adds	r3, #6
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	4413      	add	r3, r2
 8003070:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e1a      	lsrs	r2, r3, #24
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	3307      	adds	r3, #7
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0220 	orr.w	r2, r2, #32
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	e007      	b.n	80030a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0220 	orr.w	r2, r2, #32
 80030a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e006      	b.n	80030ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d002      	beq.n	80030e4 <HAL_CAN_ActivateNotification+0x1e>
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d109      	bne.n	80030f8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6959      	ldr	r1, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e006      	b.n	8003106 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b08a      	sub	sp, #40	; 0x28
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d07c      	beq.n	8003252 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d023      	beq.n	80031aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f983 	bl	8003480 <HAL_CAN_TxMailbox0CompleteCallback>
 800317a:	e016      	b.n	80031aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	e00c      	b.n	80031aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	e002      	b.n	80031aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f989 	bl	80034bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d024      	beq.n	80031fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f963 	bl	8003494 <HAL_CAN_TxMailbox1CompleteCallback>
 80031ce:	e016      	b.n	80031fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e00c      	b.n	80031fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	e002      	b.n	80031fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f969 	bl	80034d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d024      	beq.n	8003252 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003210:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f943 	bl	80034a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003222:	e016      	b.n	8003252 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e00c      	b.n	8003252 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	e002      	b.n	8003252 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f949 	bl	80034e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2210      	movs	r2, #16
 8003274:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d006      	beq.n	8003298 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2208      	movs	r2, #8
 8003290:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f930 	bl	80034f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd f91d 	bl	80004f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00c      	beq.n	80032da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2210      	movs	r2, #16
 80032d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2208      	movs	r2, #8
 80032f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f912 	bl	8003520 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8f9 	bl	800350c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2210      	movs	r2, #16
 8003334:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8fc 	bl	8003534 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2208      	movs	r2, #8
 8003356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8f5 	bl	8003548 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d07b      	beq.n	8003460 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d072      	beq.n	8003458 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d043      	beq.n	8003458 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03e      	beq.n	8003458 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e0:	2b60      	cmp	r3, #96	; 0x60
 80033e2:	d02b      	beq.n	800343c <HAL_CAN_IRQHandler+0x32a>
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d82e      	bhi.n	8003446 <HAL_CAN_IRQHandler+0x334>
 80033e8:	2b50      	cmp	r3, #80	; 0x50
 80033ea:	d022      	beq.n	8003432 <HAL_CAN_IRQHandler+0x320>
 80033ec:	2b50      	cmp	r3, #80	; 0x50
 80033ee:	d82a      	bhi.n	8003446 <HAL_CAN_IRQHandler+0x334>
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d019      	beq.n	8003428 <HAL_CAN_IRQHandler+0x316>
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d826      	bhi.n	8003446 <HAL_CAN_IRQHandler+0x334>
 80033f8:	2b30      	cmp	r3, #48	; 0x30
 80033fa:	d010      	beq.n	800341e <HAL_CAN_IRQHandler+0x30c>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d822      	bhi.n	8003446 <HAL_CAN_IRQHandler+0x334>
 8003400:	2b10      	cmp	r3, #16
 8003402:	d002      	beq.n	800340a <HAL_CAN_IRQHandler+0x2f8>
 8003404:	2b20      	cmp	r3, #32
 8003406:	d005      	beq.n	8003414 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003408:	e01d      	b.n	8003446 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	f043 0308 	orr.w	r3, r3, #8
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003412:	e019      	b.n	8003448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800341c:	e014      	b.n	8003448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	f043 0320 	orr.w	r3, r3, #32
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003426:	e00f      	b.n	8003448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003430:	e00a      	b.n	8003448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800343a:	e005      	b.n	8003448 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003444:	e000      	b.n	8003448 <HAL_CAN_IRQHandler+0x336>
            break;
 8003446:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003456:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2204      	movs	r2, #4
 800345e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f872 	bl	800355c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003478:	bf00      	nop
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4907      	ldr	r1, [pc, #28]	; (800360c <__NVIC_EnableIRQ+0x38>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	; (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
         );
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	; 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff8e 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff29 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff3e 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff8e 	bl	8003664 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5d 	bl	8003610 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff31 	bl	80035d4 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff f854 	bl	800284c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e099      	b.n	80038e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	e00f      	b.n	80037f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d2:	f7ff f83b 	bl	800284c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d908      	bls.n	80037f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e078      	b.n	80038e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e8      	bne.n	80037d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_DMA_Init+0x158>)
 800380c:	4013      	ands	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b04      	cmp	r3, #4
 8003884:	d117      	bne.n	80038b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f8bd 	bl	8003a18 <DMA_CheckFifoParam>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038b2:	2301      	movs	r3, #1
 80038b4:	e016      	b.n	80038e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f874 	bl	80039ac <DMA_CalcBaseAndBitshift>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	223f      	movs	r2, #63	; 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	f010803f 	.word	0xf010803f

080038f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e050      	b.n	80039a4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d101      	bne.n	8003912 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	e048      	b.n	80039a4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2221      	movs	r2, #33	; 0x21
 8003950:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f82a 	bl	80039ac <DMA_CalcBaseAndBitshift>
 8003958:	4603      	mov	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	223f      	movs	r2, #63	; 0x3f
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3b10      	subs	r3, #16
 80039bc:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <DMA_CalcBaseAndBitshift+0x64>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039c6:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <DMA_CalcBaseAndBitshift+0x68>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d909      	bls.n	80039ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	; 0x58
 80039ec:	e007      	b.n	80039fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	aaaaaaab 	.word	0xaaaaaaab
 8003a14:	08009e9c 	.word	0x08009e9c

08003a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d856      	bhi.n	8003ae6 <DMA_CheckFifoParam+0xce>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <DMA_CheckFifoParam+0x28>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a63 	.word	0x08003a63
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003ae7 	.word	0x08003ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d046      	beq.n	8003aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e043      	b.n	8003aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a6a:	d140      	bne.n	8003aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a70:	e03d      	b.n	8003aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7a:	d121      	bne.n	8003ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d837      	bhi.n	8003af2 <DMA_CheckFifoParam+0xda>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <DMA_CheckFifoParam+0x70>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003a9f 	.word	0x08003a9f
 8003a90:	08003a99 	.word	0x08003a99
 8003a94:	08003ab1 	.word	0x08003ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e030      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d025      	beq.n	8003af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aae:	e022      	b.n	8003af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab8:	d11f      	bne.n	8003afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003abe:	e01c      	b.n	8003afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d903      	bls.n	8003ace <DMA_CheckFifoParam+0xb6>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d003      	beq.n	8003ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003acc:	e018      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad2:	e015      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e00b      	b.n	8003afe <DMA_CheckFifoParam+0xe6>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e00a      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003aea:	bf00      	nop
 8003aec:	e008      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
 8003af0:	e006      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
    }
  } 
  
  return status; 
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e03b      	b.n	8003b9a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f914 	bl	8000d64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f023 0107 	bic.w	r1, r3, #7
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d1      	ldr	r1, [r2, #12]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af02      	add	r7, sp, #8
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA2D_Start+0x1c>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e018      	b.n	8003bf0 <HAL_DMA2D_Start+0x4e>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fa99 	bl	8004110 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d056      	beq.n	8003cc2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c14:	f7fe fe1a 	bl	800284c <HAL_GetTick>
 8003c18:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c1a:	e04b      	b.n	8003cb4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d023      	beq.n	8003c76 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2221      	movs	r2, #33	; 0x21
 8003c60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0a5      	b.n	8003dc2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fe fde5 	bl	800284c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <HAL_DMA2D_PollForTransfer+0x9c>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e086      	b.n	8003dc2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ac      	beq.n	8003c1c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d061      	beq.n	8003da8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe fdb2 	bl	800284c <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003cea:	e056      	b.n	8003d9a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d02e      	beq.n	8003d5c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2229      	movs	r2, #41	; 0x29
 8003d46:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d01a      	beq.n	8003d9a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d64:	f7fe fd72 	bl	800284c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <HAL_DMA2D_PollForTransfer+0x182>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e013      	b.n	8003dc2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0a1      	beq.n	8003cec <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2212      	movs	r2, #18
 8003dae:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d026      	beq.n	8003e3a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d021      	beq.n	8003e3a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e04:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d026      	beq.n	8003e92 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d021      	beq.n	8003e92 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2220      	movs	r2, #32
 8003e64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	f043 0202 	orr.w	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2204      	movs	r2, #4
 8003e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d026      	beq.n	8003eea <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d021      	beq.n	8003eea <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2204      	movs	r2, #4
 8003f14:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f853 	bl	8003fc2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01f      	beq.n	8003f70 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2202      	movs	r2, #2
 8003f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01f      	beq.n	8003fba <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01a      	beq.n	8003fba <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f92:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f80e 	bl	8003fd6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_DMA2D_ConfigLayer+0x20>
 8004008:	2302      	movs	r3, #2
 800400a:	e079      	b.n	8004100 <HAL_DMA2D_ConfigLayer+0x114>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	3318      	adds	r3, #24
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_DMA2D_ConfigLayer+0x120>)
 8004038:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b0a      	cmp	r3, #10
 8004040:	d003      	beq.n	800404a <HAL_DMA2D_ConfigLayer+0x5e>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b09      	cmp	r3, #9
 8004048:	d107      	bne.n	800405a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e005      	b.n	8004066 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d120      	bne.n	80040ae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	43db      	mvns	r3, r3
 8004076:	ea02 0103 	and.w	r1, r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	430a      	orrs	r2, r1
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b0a      	cmp	r3, #10
 8004094:	d003      	beq.n	800409e <HAL_DMA2D_ConfigLayer+0xb2>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b09      	cmp	r3, #9
 800409c:	d127      	bne.n	80040ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
 80040ac:	e01f      	b.n	80040ee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	ea02 0103 	and.w	r1, r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b0a      	cmp	r3, #10
 80040d6:	d003      	beq.n	80040e0 <HAL_DMA2D_ConfigLayer+0xf4>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b09      	cmp	r3, #9
 80040de:	d106      	bne.n	80040ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040ec:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	ff03000f 	.word	0xff03000f

08004110 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004110:	b480      	push	{r7}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	041a      	lsls	r2, r3, #16
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	431a      	orrs	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004148:	d174      	bne.n	8004234 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004150:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004158:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004160:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	431a      	orrs	r2, r3
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	4313      	orrs	r3, r2
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	e053      	b.n	800422a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d106      	bne.n	8004198 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4313      	orrs	r3, r2
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e048      	b.n	800422a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d111      	bne.n	80041c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	0cdb      	lsrs	r3, r3, #19
 80041a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	0a9b      	lsrs	r3, r3, #10
 80041aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	08db      	lsrs	r3, r3, #3
 80041b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	02db      	lsls	r3, r3, #11
 80041ba:	4313      	orrs	r3, r2
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	e032      	b.n	800422a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d117      	bne.n	80041fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	0fdb      	lsrs	r3, r3, #31
 80041d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	0cdb      	lsrs	r3, r3, #19
 80041d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	0adb      	lsrs	r3, r3, #11
 80041dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	08db      	lsrs	r3, r3, #3
 80041e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	431a      	orrs	r2, r3
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	03db      	lsls	r3, r3, #15
 80041f2:	4313      	orrs	r3, r2
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	e016      	b.n	800422a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	0f1b      	lsrs	r3, r3, #28
 8004200:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	0d1b      	lsrs	r3, r3, #20
 8004206:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	0b1b      	lsrs	r3, r3, #12
 800420c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	011a      	lsls	r2, r3, #4
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	431a      	orrs	r2, r3
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	4313      	orrs	r3, r2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004232:	e003      	b.n	800423c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	60da      	str	r2, [r3, #12]
}
 800423c:	bf00      	nop
 800423e:	372c      	adds	r7, #44	; 0x2c
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e177      	b.n	8004554 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004264:	2201      	movs	r2, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	f040 8166 	bne.w	800454e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d005      	beq.n	800429a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004296:	2b02      	cmp	r3, #2
 8004298:	d130      	bne.n	80042fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042d0:	2201      	movs	r2, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 0201 	and.w	r2, r3, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b03      	cmp	r3, #3
 8004306:	d017      	beq.n	8004338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d123      	bne.n	800438c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	08da      	lsrs	r2, r3, #3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3208      	adds	r2, #8
 8004386:	69b9      	ldr	r1, [r7, #24]
 8004388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0203 	and.w	r2, r3, #3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80c0 	beq.w	800454e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	4b66      	ldr	r3, [pc, #408]	; (800456c <HAL_GPIO_Init+0x324>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	4a65      	ldr	r2, [pc, #404]	; (800456c <HAL_GPIO_Init+0x324>)
 80043d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043dc:	6453      	str	r3, [r2, #68]	; 0x44
 80043de:	4b63      	ldr	r3, [pc, #396]	; (800456c <HAL_GPIO_Init+0x324>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ea:	4a61      	ldr	r2, [pc, #388]	; (8004570 <HAL_GPIO_Init+0x328>)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	089b      	lsrs	r3, r3, #2
 80043f0:	3302      	adds	r3, #2
 80043f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	220f      	movs	r2, #15
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_GPIO_Init+0x32c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d037      	beq.n	8004486 <HAL_GPIO_Init+0x23e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a57      	ldr	r2, [pc, #348]	; (8004578 <HAL_GPIO_Init+0x330>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_GPIO_Init+0x23a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a56      	ldr	r2, [pc, #344]	; (800457c <HAL_GPIO_Init+0x334>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02b      	beq.n	800447e <HAL_GPIO_Init+0x236>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a55      	ldr	r2, [pc, #340]	; (8004580 <HAL_GPIO_Init+0x338>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d025      	beq.n	800447a <HAL_GPIO_Init+0x232>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a54      	ldr	r2, [pc, #336]	; (8004584 <HAL_GPIO_Init+0x33c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <HAL_GPIO_Init+0x22e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a53      	ldr	r2, [pc, #332]	; (8004588 <HAL_GPIO_Init+0x340>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d019      	beq.n	8004472 <HAL_GPIO_Init+0x22a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a52      	ldr	r2, [pc, #328]	; (800458c <HAL_GPIO_Init+0x344>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_GPIO_Init+0x226>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a51      	ldr	r2, [pc, #324]	; (8004590 <HAL_GPIO_Init+0x348>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00d      	beq.n	800446a <HAL_GPIO_Init+0x222>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a50      	ldr	r2, [pc, #320]	; (8004594 <HAL_GPIO_Init+0x34c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_GPIO_Init+0x21e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4f      	ldr	r2, [pc, #316]	; (8004598 <HAL_GPIO_Init+0x350>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_GPIO_Init+0x21a>
 800445e:	2309      	movs	r3, #9
 8004460:	e012      	b.n	8004488 <HAL_GPIO_Init+0x240>
 8004462:	230a      	movs	r3, #10
 8004464:	e010      	b.n	8004488 <HAL_GPIO_Init+0x240>
 8004466:	2308      	movs	r3, #8
 8004468:	e00e      	b.n	8004488 <HAL_GPIO_Init+0x240>
 800446a:	2307      	movs	r3, #7
 800446c:	e00c      	b.n	8004488 <HAL_GPIO_Init+0x240>
 800446e:	2306      	movs	r3, #6
 8004470:	e00a      	b.n	8004488 <HAL_GPIO_Init+0x240>
 8004472:	2305      	movs	r3, #5
 8004474:	e008      	b.n	8004488 <HAL_GPIO_Init+0x240>
 8004476:	2304      	movs	r3, #4
 8004478:	e006      	b.n	8004488 <HAL_GPIO_Init+0x240>
 800447a:	2303      	movs	r3, #3
 800447c:	e004      	b.n	8004488 <HAL_GPIO_Init+0x240>
 800447e:	2302      	movs	r3, #2
 8004480:	e002      	b.n	8004488 <HAL_GPIO_Init+0x240>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_GPIO_Init+0x240>
 8004486:	2300      	movs	r3, #0
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	f002 0203 	and.w	r2, r2, #3
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	4093      	lsls	r3, r2
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004498:	4935      	ldr	r1, [pc, #212]	; (8004570 <HAL_GPIO_Init+0x328>)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	3302      	adds	r3, #2
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044a6:	4b3d      	ldr	r3, [pc, #244]	; (800459c <HAL_GPIO_Init+0x354>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ca:	4a34      	ldr	r2, [pc, #208]	; (800459c <HAL_GPIO_Init+0x354>)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d0:	4b32      	ldr	r3, [pc, #200]	; (800459c <HAL_GPIO_Init+0x354>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044f4:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_GPIO_Init+0x354>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044fa:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_GPIO_Init+0x354>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_GPIO_Init+0x354>)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_GPIO_Init+0x354>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <HAL_GPIO_Init+0x354>)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3301      	adds	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	f67f ae84 	bls.w	8004264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3724      	adds	r7, #36	; 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	40013800 	.word	0x40013800
 8004574:	40020000 	.word	0x40020000
 8004578:	40020400 	.word	0x40020400
 800457c:	40020800 	.word	0x40020800
 8004580:	40020c00 	.word	0x40020c00
 8004584:	40021000 	.word	0x40021000
 8004588:	40021400 	.word	0x40021400
 800458c:	40021800 	.word	0x40021800
 8004590:	40021c00 	.word	0x40021c00
 8004594:	40022000 	.word	0x40022000
 8004598:	40022400 	.word	0x40022400
 800459c:	40013c00 	.word	0x40013c00

080045a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e0d9      	b.n	8004770 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045bc:	2201      	movs	r2, #1
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	f040 80c9 	bne.w	800476a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80045d8:	4a6b      	ldr	r2, [pc, #428]	; (8004788 <HAL_GPIO_DeInit+0x1e8>)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	220f      	movs	r2, #15
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a63      	ldr	r2, [pc, #396]	; (800478c <HAL_GPIO_DeInit+0x1ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d037      	beq.n	8004672 <HAL_GPIO_DeInit+0xd2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a62      	ldr	r2, [pc, #392]	; (8004790 <HAL_GPIO_DeInit+0x1f0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_GPIO_DeInit+0xce>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a61      	ldr	r2, [pc, #388]	; (8004794 <HAL_GPIO_DeInit+0x1f4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <HAL_GPIO_DeInit+0xca>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a60      	ldr	r2, [pc, #384]	; (8004798 <HAL_GPIO_DeInit+0x1f8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d025      	beq.n	8004666 <HAL_GPIO_DeInit+0xc6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a5f      	ldr	r2, [pc, #380]	; (800479c <HAL_GPIO_DeInit+0x1fc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01f      	beq.n	8004662 <HAL_GPIO_DeInit+0xc2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a5e      	ldr	r2, [pc, #376]	; (80047a0 <HAL_GPIO_DeInit+0x200>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d019      	beq.n	800465e <HAL_GPIO_DeInit+0xbe>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a5d      	ldr	r2, [pc, #372]	; (80047a4 <HAL_GPIO_DeInit+0x204>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <HAL_GPIO_DeInit+0xba>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a5c      	ldr	r2, [pc, #368]	; (80047a8 <HAL_GPIO_DeInit+0x208>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00d      	beq.n	8004656 <HAL_GPIO_DeInit+0xb6>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a5b      	ldr	r2, [pc, #364]	; (80047ac <HAL_GPIO_DeInit+0x20c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <HAL_GPIO_DeInit+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a5a      	ldr	r2, [pc, #360]	; (80047b0 <HAL_GPIO_DeInit+0x210>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <HAL_GPIO_DeInit+0xae>
 800464a:	2309      	movs	r3, #9
 800464c:	e012      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 800464e:	230a      	movs	r3, #10
 8004650:	e010      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 8004652:	2308      	movs	r3, #8
 8004654:	e00e      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 8004656:	2307      	movs	r3, #7
 8004658:	e00c      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 800465a:	2306      	movs	r3, #6
 800465c:	e00a      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 800465e:	2305      	movs	r3, #5
 8004660:	e008      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 8004662:	2304      	movs	r3, #4
 8004664:	e006      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 8004666:	2303      	movs	r3, #3
 8004668:	e004      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 800466a:	2302      	movs	r3, #2
 800466c:	e002      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_GPIO_DeInit+0xd4>
 8004672:	2300      	movs	r3, #0
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	f002 0203 	and.w	r2, r2, #3
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	4093      	lsls	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	d132      	bne.n	80046ea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004684:	4b4b      	ldr	r3, [pc, #300]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	43db      	mvns	r3, r3
 800468c:	4949      	ldr	r1, [pc, #292]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 800468e:	4013      	ands	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004692:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	43db      	mvns	r3, r3
 800469a:	4946      	ldr	r1, [pc, #280]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 800469c:	4013      	ands	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046a0:	4b44      	ldr	r3, [pc, #272]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	4942      	ldr	r1, [pc, #264]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	493f      	ldr	r1, [pc, #252]	; (80047b4 <HAL_GPIO_DeInit+0x214>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80046cc:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <HAL_GPIO_DeInit+0x1e8>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	43da      	mvns	r2, r3
 80046dc:	482a      	ldr	r0, [pc, #168]	; (8004788 <HAL_GPIO_DeInit+0x1e8>)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	400a      	ands	r2, r1
 80046e4:	3302      	adds	r3, #2
 80046e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2103      	movs	r1, #3
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	401a      	ands	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	08d2      	lsrs	r2, r2, #3
 8004720:	4019      	ands	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3208      	adds	r2, #8
 8004726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2103      	movs	r1, #3
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	401a      	ands	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	2101      	movs	r1, #1
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2103      	movs	r1, #3
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	401a      	ands	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	3301      	adds	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	f67f af22 	bls.w	80045bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40013800 	.word	0x40013800
 800478c:	40020000 	.word	0x40020000
 8004790:	40020400 	.word	0x40020400
 8004794:	40020800 	.word	0x40020800
 8004798:	40020c00 	.word	0x40020c00
 800479c:	40021000 	.word	0x40021000
 80047a0:	40021400 	.word	0x40021400
 80047a4:	40021800 	.word	0x40021800
 80047a8:	40021c00 	.word	0x40021c00
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40022400 	.word	0x40022400
 80047b4:	40013c00 	.word	0x40013c00

080047b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c8:	787b      	ldrb	r3, [r7, #1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	041a      	lsls	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e12b      	b.n	8004a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc face 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	; 0x24
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800483e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800484e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004850:	f001 f9de 	bl	8005c10 <HAL_RCC_GetPCLK1Freq>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4a81      	ldr	r2, [pc, #516]	; (8004a60 <HAL_I2C_Init+0x274>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d807      	bhi.n	8004870 <HAL_I2C_Init+0x84>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a80      	ldr	r2, [pc, #512]	; (8004a64 <HAL_I2C_Init+0x278>)
 8004864:	4293      	cmp	r3, r2
 8004866:	bf94      	ite	ls
 8004868:	2301      	movls	r3, #1
 800486a:	2300      	movhi	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e006      	b.n	800487e <HAL_I2C_Init+0x92>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a7d      	ldr	r2, [pc, #500]	; (8004a68 <HAL_I2C_Init+0x27c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	bf94      	ite	ls
 8004878:	2301      	movls	r3, #1
 800487a:	2300      	movhi	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0e7      	b.n	8004a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a78      	ldr	r2, [pc, #480]	; (8004a6c <HAL_I2C_Init+0x280>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0c9b      	lsrs	r3, r3, #18
 8004890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a6a      	ldr	r2, [pc, #424]	; (8004a60 <HAL_I2C_Init+0x274>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d802      	bhi.n	80048c0 <HAL_I2C_Init+0xd4>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3301      	adds	r3, #1
 80048be:	e009      	b.n	80048d4 <HAL_I2C_Init+0xe8>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	4a69      	ldr	r2, [pc, #420]	; (8004a70 <HAL_I2C_Init+0x284>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	3301      	adds	r3, #1
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	430b      	orrs	r3, r1
 80048da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	495c      	ldr	r1, [pc, #368]	; (8004a60 <HAL_I2C_Init+0x274>)
 80048f0:	428b      	cmp	r3, r1
 80048f2:	d819      	bhi.n	8004928 <HAL_I2C_Init+0x13c>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1e59      	subs	r1, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004908:	400b      	ands	r3, r1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_I2C_Init+0x138>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1e59      	subs	r1, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fbb1 f3f3 	udiv	r3, r1, r3
 800491c:	3301      	adds	r3, #1
 800491e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004922:	e051      	b.n	80049c8 <HAL_I2C_Init+0x1dc>
 8004924:	2304      	movs	r3, #4
 8004926:	e04f      	b.n	80049c8 <HAL_I2C_Init+0x1dc>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d111      	bne.n	8004954 <HAL_I2C_Init+0x168>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1e58      	subs	r0, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	440b      	add	r3, r1
 800493e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004942:	3301      	adds	r3, #1
 8004944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e012      	b.n	800497a <HAL_I2C_Init+0x18e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1e58      	subs	r0, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	0099      	lsls	r1, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	fbb0 f3f3 	udiv	r3, r0, r3
 800496a:	3301      	adds	r3, #1
 800496c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x196>
 800497e:	2301      	movs	r3, #1
 8004980:	e022      	b.n	80049c8 <HAL_I2C_Init+0x1dc>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10e      	bne.n	80049a8 <HAL_I2C_Init+0x1bc>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1e58      	subs	r0, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	440b      	add	r3, r1
 8004998:	fbb0 f3f3 	udiv	r3, r0, r3
 800499c:	3301      	adds	r3, #1
 800499e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	e00f      	b.n	80049c8 <HAL_I2C_Init+0x1dc>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e58      	subs	r0, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	0099      	lsls	r1, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	6809      	ldr	r1, [r1, #0]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6911      	ldr	r1, [r2, #16]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68d2      	ldr	r2, [r2, #12]
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	000186a0 	.word	0x000186a0
 8004a64:	001e847f 	.word	0x001e847f
 8004a68:	003d08ff 	.word	0x003d08ff
 8004a6c:	431bde83 	.word	0x431bde83
 8004a70:	10624dd3 	.word	0x10624dd3

08004a74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d129      	bne.n	8004ade <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0210 	bic.w	r2, r2, #16
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d12a      	bne.n	8004b5c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2224      	movs	r2, #36	; 0x24
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	f023 030f 	bic.w	r3, r3, #15
 8004b2c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	89fa      	ldrh	r2, [r7, #14]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0bf      	b.n	8004cfe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc f978 	bl	8000e88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004bae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6999      	ldr	r1, [r3, #24]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_LTDC_Init+0x19c>)
 8004be0:	400b      	ands	r3, r1
 8004be2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68d9      	ldr	r1, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <HAL_LTDC_Init+0x19c>)
 8004c0e:	400b      	ands	r3, r1
 8004c10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68d9      	ldr	r1, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6919      	ldr	r1, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b33      	ldr	r3, [pc, #204]	; (8004d08 <HAL_LTDC_Init+0x19c>)
 8004c3c:	400b      	ands	r3, r1
 8004c3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6959      	ldr	r1, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_LTDC_Init+0x19c>)
 8004c6a:	400b      	ands	r3, r1
 8004c6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6959      	ldr	r1, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0206 	orr.w	r2, r2, #6
 8004cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	f000f800 	.word	0xf000f800

08004d0c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d023      	beq.n	8004d76 <HAL_LTDC_IRQHandler+0x6a>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01e      	beq.n	8004d76 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0204 	bic.w	r2, r2, #4
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2204      	movs	r2, #4
 8004d64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f86f 	bl	8004e54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d023      	beq.n	8004dc8 <HAL_LTDC_IRQHandler+0xbc>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01e      	beq.n	8004dc8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0202 	bic.w	r2, r2, #2
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da8:	f043 0202 	orr.w	r2, r3, #2
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f846 	bl	8004e54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01b      	beq.n	8004e0a <HAL_LTDC_IRQHandler+0xfe>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f82f 	bl	8004e68 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01b      	beq.n	8004e4c <HAL_LTDC_IRQHandler+0x140>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0208 	bic.w	r2, r2, #8
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2208      	movs	r2, #8
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f818 	bl	8004e7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e90:	b5b0      	push	{r4, r5, r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_LTDC_ConfigLayer+0x1a>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e02c      	b.n	8004f04 <HAL_LTDC_ConfigLayer+0x74>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2134      	movs	r1, #52	; 0x34
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4614      	mov	r4, r2
 8004ece:	461d      	mov	r5, r3
 8004ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f83b 	bl	8004f60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}

08004f0c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_LTDC_EnableDither+0x16>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e016      	b.n	8004f50 <HAL_LTDC_EnableDither+0x44>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_LTDC_EnableDither+0x50>)
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_LTDC_EnableDither+0x50>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40016800 	.word	0x40016800

08004f60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7c:	4413      	add	r3, r2
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	01db      	lsls	r3, r3, #7
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3384      	adds	r3, #132	; 0x84
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	4611      	mov	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	01d2      	lsls	r2, r2, #7
 8004f9c:	440a      	add	r2, r1
 8004f9e:	3284      	adds	r2, #132	; 0x84
 8004fa0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fa4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fb6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fb8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	01db      	lsls	r3, r3, #7
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3384      	adds	r3, #132	; 0x84
 8004fc8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fde:	4413      	add	r3, r2
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	01db      	lsls	r3, r3, #7
 8004fee:	4413      	add	r3, r2
 8004ff0:	3384      	adds	r3, #132	; 0x84
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	01d2      	lsls	r2, r2, #7
 8004ffe:	440a      	add	r2, r1
 8005000:	3284      	adds	r2, #132	; 0x84
 8005002:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005006:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005016:	4413      	add	r3, r2
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4619      	mov	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	01db      	lsls	r3, r3, #7
 8005024:	440b      	add	r3, r1
 8005026:	3384      	adds	r3, #132	; 0x84
 8005028:	4619      	mov	r1, r3
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4313      	orrs	r3, r2
 800502e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	01db      	lsls	r3, r3, #7
 800503a:	4413      	add	r3, r2
 800503c:	3384      	adds	r3, #132	; 0x84
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	4611      	mov	r1, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	01d2      	lsls	r2, r2, #7
 800504a:	440a      	add	r2, r1
 800504c:	3284      	adds	r2, #132	; 0x84
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	01db      	lsls	r3, r3, #7
 800505e:	4413      	add	r3, r2
 8005060:	3384      	adds	r3, #132	; 0x84
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	061b      	lsls	r3, r3, #24
 8005084:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	01db      	lsls	r3, r3, #7
 8005090:	4413      	add	r3, r2
 8005092:	3384      	adds	r3, #132	; 0x84
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	01db      	lsls	r3, r3, #7
 80050a0:	4413      	add	r3, r2
 80050a2:	3384      	adds	r3, #132	; 0x84
 80050a4:	461a      	mov	r2, r3
 80050a6:	2300      	movs	r3, #0
 80050a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050b0:	461a      	mov	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	01db      	lsls	r3, r3, #7
 80050c4:	440b      	add	r3, r1
 80050c6:	3384      	adds	r3, #132	; 0x84
 80050c8:	4619      	mov	r1, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	01db      	lsls	r3, r3, #7
 80050da:	4413      	add	r3, r2
 80050dc:	3384      	adds	r3, #132	; 0x84
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	4611      	mov	r1, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	01d2      	lsls	r2, r2, #7
 80050ea:	440a      	add	r2, r1
 80050ec:	3284      	adds	r2, #132	; 0x84
 80050ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	01db      	lsls	r3, r3, #7
 80050fe:	4413      	add	r3, r2
 8005100:	3384      	adds	r3, #132	; 0x84
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	01db      	lsls	r3, r3, #7
 8005114:	4413      	add	r3, r2
 8005116:	3384      	adds	r3, #132	; 0x84
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	4611      	mov	r1, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	01d2      	lsls	r2, r2, #7
 8005124:	440a      	add	r2, r1
 8005126:	3284      	adds	r2, #132	; 0x84
 8005128:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800512c:	f023 0307 	bic.w	r3, r3, #7
 8005130:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	6809      	ldr	r1, [r1, #0]
 800513e:	4608      	mov	r0, r1
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	01c9      	lsls	r1, r1, #7
 8005144:	4401      	add	r1, r0
 8005146:	3184      	adds	r1, #132	; 0x84
 8005148:	4313      	orrs	r3, r2
 800514a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	01db      	lsls	r3, r3, #7
 8005156:	4413      	add	r3, r2
 8005158:	3384      	adds	r3, #132	; 0x84
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	4413      	add	r3, r2
 8005168:	3384      	adds	r3, #132	; 0x84
 800516a:	461a      	mov	r2, r3
 800516c:	2300      	movs	r3, #0
 800516e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	01db      	lsls	r3, r3, #7
 800517a:	4413      	add	r3, r2
 800517c:	3384      	adds	r3, #132	; 0x84
 800517e:	461a      	mov	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800518e:	2304      	movs	r3, #4
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	e01b      	b.n	80051cc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d102      	bne.n	80051a2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800519c:	2303      	movs	r3, #3
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	e014      	b.n	80051cc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00b      	beq.n	80051c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d007      	beq.n	80051c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d003      	beq.n	80051c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051be:	2b07      	cmp	r3, #7
 80051c0:	d102      	bne.n	80051c8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80051c2:	2302      	movs	r3, #2
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	e001      	b.n	80051cc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80051c8:	2301      	movs	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	01db      	lsls	r3, r3, #7
 80051d6:	4413      	add	r3, r2
 80051d8:	3384      	adds	r3, #132	; 0x84
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4611      	mov	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	01d2      	lsls	r2, r2, #7
 80051e6:	440a      	add	r2, r1
 80051e8:	3284      	adds	r2, #132	; 0x84
 80051ea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80051ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	1acb      	subs	r3, r1, r3
 8005206:	69f9      	ldr	r1, [r7, #28]
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	6809      	ldr	r1, [r1, #0]
 8005212:	4608      	mov	r0, r1
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	01c9      	lsls	r1, r1, #7
 8005218:	4401      	add	r1, r0
 800521a:	3184      	adds	r1, #132	; 0x84
 800521c:	4313      	orrs	r3, r2
 800521e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	01db      	lsls	r3, r3, #7
 800522a:	4413      	add	r3, r2
 800522c:	3384      	adds	r3, #132	; 0x84
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	4611      	mov	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	01d2      	lsls	r2, r2, #7
 800523a:	440a      	add	r2, r1
 800523c:	3284      	adds	r2, #132	; 0x84
 800523e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005242:	f023 0307 	bic.w	r3, r3, #7
 8005246:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	01db      	lsls	r3, r3, #7
 8005252:	4413      	add	r3, r2
 8005254:	3384      	adds	r3, #132	; 0x84
 8005256:	461a      	mov	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	01db      	lsls	r3, r3, #7
 8005268:	4413      	add	r3, r2
 800526a:	3384      	adds	r3, #132	; 0x84
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	4611      	mov	r1, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	01d2      	lsls	r2, r2, #7
 8005278:	440a      	add	r2, r1
 800527a:	3284      	adds	r2, #132	; 0x84
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	6013      	str	r3, [r2, #0]
}
 8005282:	bf00      	nop
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4b20      	ldr	r3, [pc, #128]	; (8005320 <HAL_PWREx_EnableOverDrive+0x90>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <HAL_PWREx_EnableOverDrive+0x90>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
 80052aa:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <HAL_PWREx_EnableOverDrive+0x90>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052b6:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <HAL_PWREx_EnableOverDrive+0x94>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052bc:	f7fd fac6 	bl	800284c <HAL_GetTick>
 80052c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052c2:	e009      	b.n	80052d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052c4:	f7fd fac2 	bl	800284c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d2:	d901      	bls.n	80052d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e01f      	b.n	8005318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <HAL_PWREx_EnableOverDrive+0x98>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e4:	d1ee      	bne.n	80052c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_PWREx_EnableOverDrive+0x9c>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ec:	f7fd faae 	bl	800284c <HAL_GetTick>
 80052f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052f2:	e009      	b.n	8005308 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052f4:	f7fd faaa 	bl	800284c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005302:	d901      	bls.n	8005308 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e007      	b.n	8005318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <HAL_PWREx_EnableOverDrive+0x98>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005314:	d1ee      	bne.n	80052f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40023800 	.word	0x40023800
 8005324:	420e0040 	.word	0x420e0040
 8005328:	40007000 	.word	0x40007000
 800532c:	420e0044 	.word	0x420e0044

08005330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e267      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d075      	beq.n	800543a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800534e:	4b88      	ldr	r3, [pc, #544]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b04      	cmp	r3, #4
 8005358:	d00c      	beq.n	8005374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800535a:	4b85      	ldr	r3, [pc, #532]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005362:	2b08      	cmp	r3, #8
 8005364:	d112      	bne.n	800538c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005366:	4b82      	ldr	r3, [pc, #520]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005372:	d10b      	bne.n	800538c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	4b7e      	ldr	r3, [pc, #504]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d05b      	beq.n	8005438 <HAL_RCC_OscConfig+0x108>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d157      	bne.n	8005438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e242      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_OscConfig+0x74>
 8005396:	4b76      	ldr	r3, [pc, #472]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a75      	ldr	r2, [pc, #468]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e01d      	b.n	80053e0 <HAL_RCC_OscConfig+0xb0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x98>
 80053ae:	4b70      	ldr	r3, [pc, #448]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6f      	ldr	r2, [pc, #444]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b6d      	ldr	r3, [pc, #436]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a6c      	ldr	r2, [pc, #432]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e00b      	b.n	80053e0 <HAL_RCC_OscConfig+0xb0>
 80053c8:	4b69      	ldr	r3, [pc, #420]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a68      	ldr	r2, [pc, #416]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4b66      	ldr	r3, [pc, #408]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a65      	ldr	r2, [pc, #404]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80053da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d013      	beq.n	8005410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fd fa30 	bl	800284c <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fd fa2c 	bl	800284c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	; 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e207      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	4b5b      	ldr	r3, [pc, #364]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0xc0>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7fd fa1c 	bl	800284c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005418:	f7fd fa18 	bl	800284c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	; 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e1f3      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800542a:	4b51      	ldr	r3, [pc, #324]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0xe8>
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d063      	beq.n	800550e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005446:	4b4a      	ldr	r3, [pc, #296]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005452:	4b47      	ldr	r3, [pc, #284]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800545a:	2b08      	cmp	r3, #8
 800545c:	d11c      	bne.n	8005498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545e:	4b44      	ldr	r3, [pc, #272]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d116      	bne.n	8005498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800546a:	4b41      	ldr	r3, [pc, #260]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_RCC_OscConfig+0x152>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d001      	beq.n	8005482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e1c7      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005482:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4937      	ldr	r1, [pc, #220]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005496:	e03a      	b.n	800550e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <HAL_RCC_OscConfig+0x244>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fd f9d1 	bl	800284c <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ae:	f7fd f9cd 	bl	800284c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e1a8      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c0:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054cc:	4b28      	ldr	r3, [pc, #160]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4925      	ldr	r1, [pc, #148]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
 80054e0:	e015      	b.n	800550e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <HAL_RCC_OscConfig+0x244>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fd f9b0 	bl	800284c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fd f9ac 	bl	800284c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e187      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005502:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d036      	beq.n	8005588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005522:	4b15      	ldr	r3, [pc, #84]	; (8005578 <HAL_RCC_OscConfig+0x248>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005528:	f7fd f990 	bl	800284c <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005530:	f7fd f98c 	bl	800284c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e167      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_RCC_OscConfig+0x240>)
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0x200>
 800554e:	e01b      	b.n	8005588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005550:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_RCC_OscConfig+0x248>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005556:	f7fd f979 	bl	800284c <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555c:	e00e      	b.n	800557c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800555e:	f7fd f975 	bl	800284c <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d907      	bls.n	800557c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e150      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
 8005570:	40023800 	.word	0x40023800
 8005574:	42470000 	.word	0x42470000
 8005578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800557c:	4b88      	ldr	r3, [pc, #544]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ea      	bne.n	800555e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8097 	beq.w	80056c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559a:	4b81      	ldr	r3, [pc, #516]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	4b7d      	ldr	r3, [pc, #500]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	4a7c      	ldr	r2, [pc, #496]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	6413      	str	r3, [r2, #64]	; 0x40
 80055b6:	4b7a      	ldr	r3, [pc, #488]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	4b77      	ldr	r3, [pc, #476]	; (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d118      	bne.n	8005604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d2:	4b74      	ldr	r3, [pc, #464]	; (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7fd f935 	bl	800284c <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fd f931 	bl	800284c <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e10c      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	4b6a      	ldr	r3, [pc, #424]	; (80057a4 <HAL_RCC_OscConfig+0x474>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d106      	bne.n	800561a <HAL_RCC_OscConfig+0x2ea>
 800560c:	4b64      	ldr	r3, [pc, #400]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	4a63      	ldr	r2, [pc, #396]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6713      	str	r3, [r2, #112]	; 0x70
 8005618:	e01c      	b.n	8005654 <HAL_RCC_OscConfig+0x324>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b05      	cmp	r3, #5
 8005620:	d10c      	bne.n	800563c <HAL_RCC_OscConfig+0x30c>
 8005622:	4b5f      	ldr	r3, [pc, #380]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	4a5e      	ldr	r2, [pc, #376]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6713      	str	r3, [r2, #112]	; 0x70
 800562e:	4b5c      	ldr	r3, [pc, #368]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	6713      	str	r3, [r2, #112]	; 0x70
 800563a:	e00b      	b.n	8005654 <HAL_RCC_OscConfig+0x324>
 800563c:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	4a57      	ldr	r2, [pc, #348]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6713      	str	r3, [r2, #112]	; 0x70
 8005648:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	4a54      	ldr	r2, [pc, #336]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800564e:	f023 0304 	bic.w	r3, r3, #4
 8005652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fd f8f6 	bl	800284c <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005662:	e00a      	b.n	800567a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fd f8f2 	bl	800284c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0cb      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567a:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0ee      	beq.n	8005664 <HAL_RCC_OscConfig+0x334>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005688:	f7fd f8e0 	bl	800284c <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fd f8dc 	bl	800284c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	; 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0b5      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a6:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ee      	bne.n	8005690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d105      	bne.n	80056c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b8:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80a1 	beq.w	8005810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ce:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d05c      	beq.n	8005794 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d141      	bne.n	8005766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <HAL_RCC_OscConfig+0x478>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fd f8b0 	bl	800284c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fd f8ac 	bl	800284c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e087      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	019b      	lsls	r3, r3, #6
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	3b01      	subs	r3, #1
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	061b      	lsls	r3, r3, #24
 8005732:	491b      	ldr	r1, [pc, #108]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCC_OscConfig+0x478>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fd f885 	bl	800284c <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005746:	f7fd f881 	bl	800284c <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e05c      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x416>
 8005764:	e054      	b.n	8005810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <HAL_RCC_OscConfig+0x478>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fd f86e 	bl	800284c <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005774:	f7fd f86a 	bl	800284c <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e045      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_RCC_OscConfig+0x470>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x444>
 8005792:	e03d      	b.n	8005810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e038      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40007000 	.word	0x40007000
 80057a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <HAL_RCC_OscConfig+0x4ec>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d028      	beq.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d121      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d11a      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d111      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	3b01      	subs	r3, #1
 80057f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800

08005820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0cc      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005834:	4b68      	ldr	r3, [pc, #416]	; (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d90c      	bls.n	800585c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005842:	4b65      	ldr	r3, [pc, #404]	; (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584a:	4b63      	ldr	r3, [pc, #396]	; (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d001      	beq.n	800585c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0b8      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d020      	beq.n	80058aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4a58      	ldr	r2, [pc, #352]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800587e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800588c:	4b53      	ldr	r3, [pc, #332]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4a52      	ldr	r2, [pc, #328]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b50      	ldr	r3, [pc, #320]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	494d      	ldr	r1, [pc, #308]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d044      	beq.n	8005940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b47      	ldr	r3, [pc, #284]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d119      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d003      	beq.n	80058de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e06f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	4b3b      	ldr	r3, [pc, #236]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e067      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fe:	4b37      	ldr	r3, [pc, #220]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4934      	ldr	r1, [pc, #208]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	4313      	orrs	r3, r2
 800590e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005910:	f7fc ff9c 	bl	800284c <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	e00a      	b.n	800592e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fc ff98 	bl	800284c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e04f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	4b2b      	ldr	r3, [pc, #172]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 020c 	and.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	429a      	cmp	r2, r3
 800593e:	d1eb      	bne.n	8005918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005940:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d20c      	bcs.n	8005968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e032      	b.n	80059ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005974:	4b19      	ldr	r3, [pc, #100]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4916      	ldr	r1, [pc, #88]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	490e      	ldr	r1, [pc, #56]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059a6:	f000 f821 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	490a      	ldr	r1, [pc, #40]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_ClockConfig+0x1c8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fc fefc 	bl	80027c4 <HAL_InitTick>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023c00 	.word	0x40023c00
 80059dc:	40023800 	.word	0x40023800
 80059e0:	080074f4 	.word	0x080074f4
 80059e4:	20000008 	.word	0x20000008
 80059e8:	20000058 	.word	0x20000058

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f0:	b094      	sub	sp, #80	; 0x50
 80059f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
 80059f8:	2300      	movs	r3, #0
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059fc:	2300      	movs	r3, #0
 80059fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a04:	4b79      	ldr	r3, [pc, #484]	; (8005bec <HAL_RCC_GetSysClockFreq+0x200>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d00d      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0x40>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	f200 80e1 	bhi.w	8005bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x34>
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a1e:	e0db      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a20:	4b73      	ldr	r3, [pc, #460]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a24:	e0db      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a26:	4b73      	ldr	r3, [pc, #460]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a2a:	e0d8      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a2c:	4b6f      	ldr	r3, [pc, #444]	; (8005bec <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a36:	4b6d      	ldr	r3, [pc, #436]	; (8005bec <HAL_RCC_GetSysClockFreq+0x200>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d063      	beq.n	8005b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a42:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <HAL_RCC_GetSysClockFreq+0x200>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	2200      	movs	r2, #0
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	633b      	str	r3, [r7, #48]	; 0x30
 8005a56:	2300      	movs	r3, #0
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	0159      	lsls	r1, r3, #5
 8005a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a70:	0150      	lsls	r0, r2, #5
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4621      	mov	r1, r4
 8005a78:	1a51      	subs	r1, r2, r1
 8005a7a:	6139      	str	r1, [r7, #16]
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a90:	4659      	mov	r1, fp
 8005a92:	018b      	lsls	r3, r1, #6
 8005a94:	4651      	mov	r1, sl
 8005a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	018a      	lsls	r2, r1, #6
 8005a9e:	4651      	mov	r1, sl
 8005aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8005aa4:	4659      	mov	r1, fp
 8005aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005abe:	4690      	mov	r8, r2
 8005ac0:	4699      	mov	r9, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	eb18 0303 	adds.w	r3, r8, r3
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	462b      	mov	r3, r5
 8005acc:	eb49 0303 	adc.w	r3, r9, r3
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ade:	4629      	mov	r1, r5
 8005ae0:	024b      	lsls	r3, r1, #9
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ae8:	4621      	mov	r1, r4
 8005aea:	024a      	lsls	r2, r1, #9
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af2:	2200      	movs	r2, #0
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005afc:	f7fa fb76 	bl	80001ec <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4613      	mov	r3, r2
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	e058      	b.n	8005bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b0a:	4b38      	ldr	r3, [pc, #224]	; (8005bec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	099b      	lsrs	r3, r3, #6
 8005b10:	2200      	movs	r2, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	4611      	mov	r1, r2
 8005b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b24:	4642      	mov	r2, r8
 8005b26:	464b      	mov	r3, r9
 8005b28:	f04f 0000 	mov.w	r0, #0
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	0159      	lsls	r1, r3, #5
 8005b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b36:	0150      	lsls	r0, r2, #5
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b42:	4649      	mov	r1, r9
 8005b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005b60:	eb63 050b 	sbc.w	r5, r3, fp
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	00eb      	lsls	r3, r5, #3
 8005b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b72:	00e2      	lsls	r2, r4, #3
 8005b74:	4614      	mov	r4, r2
 8005b76:	461d      	mov	r5, r3
 8005b78:	4643      	mov	r3, r8
 8005b7a:	18e3      	adds	r3, r4, r3
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	464b      	mov	r3, r9
 8005b80:	eb45 0303 	adc.w	r3, r5, r3
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b92:	4629      	mov	r1, r5
 8005b94:	028b      	lsls	r3, r1, #10
 8005b96:	4621      	mov	r1, r4
 8005b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	028a      	lsls	r2, r1, #10
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	61fa      	str	r2, [r7, #28]
 8005bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb0:	f7fa fb1c 	bl	80001ec <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4613      	mov	r3, r2
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_GetSysClockFreq+0x200>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bd6:	e002      	b.n	8005bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd8:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3750      	adds	r7, #80	; 0x50
 8005be4:	46bd      	mov	sp, r7
 8005be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	00f42400 	.word	0x00f42400
 8005bf4:	007a1200 	.word	0x007a1200

08005bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000008 	.word	0x20000008

08005c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c14:	f7ff fff0 	bl	8005bf8 <HAL_RCC_GetHCLKFreq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	0a9b      	lsrs	r3, r3, #10
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	4903      	ldr	r1, [pc, #12]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c26:	5ccb      	ldrb	r3, [r1, r3]
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40023800 	.word	0x40023800
 8005c34:	08007504 	.word	0x08007504

08005c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c3c:	f7ff ffdc 	bl	8005bf8 <HAL_RCC_GetHCLKFreq>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	0b5b      	lsrs	r3, r3, #13
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	4903      	ldr	r1, [pc, #12]	; (8005c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c4e:	5ccb      	ldrb	r3, [r1, r3]
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	08007504 	.word	0x08007504

08005c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d105      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d075      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c94:	4b91      	ldr	r3, [pc, #580]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c9a:	f7fc fdd7 	bl	800284c <HAL_GetTick>
 8005c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ca2:	f7fc fdd3 	bl	800284c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e189      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cb4:	4b8a      	ldr	r3, [pc, #552]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	019a      	lsls	r2, r3, #6
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	071b      	lsls	r3, r3, #28
 8005cd8:	4981      	ldr	r1, [pc, #516]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01f      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cec:	4b7c      	ldr	r3, [pc, #496]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf2:	0f1b      	lsrs	r3, r3, #28
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	019a      	lsls	r2, r3, #6
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	431a      	orrs	r2, r3
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	071b      	lsls	r3, r3, #28
 8005d0c:	4974      	ldr	r1, [pc, #464]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d14:	4b72      	ldr	r3, [pc, #456]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d1a:	f023 021f 	bic.w	r2, r3, #31
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	496e      	ldr	r1, [pc, #440]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00d      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	019a      	lsls	r2, r3, #6
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	061b      	lsls	r3, r3, #24
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	071b      	lsls	r3, r3, #28
 8005d4c:	4964      	ldr	r1, [pc, #400]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d54:	4b61      	ldr	r3, [pc, #388]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d5a:	f7fc fd77 	bl	800284c <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d62:	f7fc fd73 	bl	800284c <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e129      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d74:	4b5a      	ldr	r3, [pc, #360]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d079      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d98:	4b52      	ldr	r3, [pc, #328]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9e:	f7fc fd55 	bl	800284c <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005da6:	f7fc fd51 	bl	800284c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e107      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005db8:	4b49      	ldr	r3, [pc, #292]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc4:	d0ef      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d020      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005dd2:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	0f1b      	lsrs	r3, r3, #28
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	019a      	lsls	r2, r3, #6
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	061b      	lsls	r3, r3, #24
 8005dec:	431a      	orrs	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	071b      	lsls	r3, r3, #28
 8005df2:	493b      	ldr	r1, [pc, #236]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005dfa:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	4934      	ldr	r1, [pc, #208]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01e      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e20:	4b2f      	ldr	r3, [pc, #188]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	0e1b      	lsrs	r3, r3, #24
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	019a      	lsls	r2, r3, #6
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	071b      	lsls	r3, r3, #28
 8005e40:	4927      	ldr	r1, [pc, #156]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	4922      	ldr	r1, [pc, #136]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e64:	f7fc fcf2 	bl	800284c <HAL_GetTick>
 8005e68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e6c:	f7fc fcee 	bl	800284c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e0a4      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e7e:	4b18      	ldr	r3, [pc, #96]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8a:	d1ef      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 808b 	beq.w	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	4a0f      	ldr	r2, [pc, #60]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a0b      	ldr	r2, [pc, #44]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ec2:	f7fc fcc3 	bl	800284c <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ec8:	e010      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fc fcbf 	bl	800284c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d909      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e075      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005edc:	42470068 	.word	0x42470068
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	42470070 	.word	0x42470070
 8005ee8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005eec:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0e8      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef8:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f00:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02f      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d028      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f16:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f20:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f2c:	4a29      	ldr	r2, [pc, #164]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f32:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d114      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f3e:	f7fc fc85 	bl	800284c <HAL_GetTick>
 8005f42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f44:	e00a      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f46:	f7fc fc81 	bl	800284c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e035      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0ee      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f74:	d10d      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005f76:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8a:	4912      	ldr	r1, [pc, #72]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	608b      	str	r3, [r1, #8]
 8005f90:	e005      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a0f      	ldr	r2, [pc, #60]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f9c:	6093      	str	r3, [r2, #8]
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005faa:	490a      	ldr	r1, [pc, #40]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005fc4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40007000 	.word	0x40007000
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	42470e40 	.word	0x42470e40
 8005fdc:	424711e0 	.word	0x424711e0

08005fe0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e025      	b.n	8006040 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb f9b5 	bl	8001378 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
 800601e:	4619      	mov	r1, r3
 8006020:	4610      	mov	r0, r2
 8006022:	f001 f90f 	bl	8007244 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	461a      	mov	r2, r3
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	f001 f964 	bl	80072fe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800605a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d101      	bne.n	8006066 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
 8006064:	e021      	b.n	80060aa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d002      	beq.n	8006072 <HAL_SDRAM_SendCommand+0x2a>
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b05      	cmp	r3, #5
 8006070:	d118      	bne.n	80060a4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	4618      	mov	r0, r3
 8006084:	f001 f9a4 	bl	80073d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d104      	bne.n	800609a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2205      	movs	r2, #5
 8006094:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006098:	e006      	b.n	80060a8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80060a2:	e001      	b.n	80060a8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d101      	bne.n	80060cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
 80060ca:	e016      	b.n	80060fa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10f      	bne.n	80060f8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 f9af 	bl	800744a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e07b      	b.n	800620c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006124:	d009      	beq.n	800613a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	61da      	str	r2, [r3, #28]
 800612c:	e005      	b.n	800613a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fa ffcf 	bl	80010f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006170:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	ea42 0103 	orr.w	r1, r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	f003 0104 	and.w	r1, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	f003 0210 	and.w	r2, r3, #16
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e01a      	b.n	800625c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fa ffa2 	bl	8001188 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Transmit+0x22>
 8006282:	2302      	movs	r3, #2
 8006284:	e126      	b.n	80064d4 <HAL_SPI_Transmit+0x270>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628e:	f7fc fadd 	bl	800284c <HAL_GetTick>
 8006292:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062a8:	e10b      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Transmit+0x52>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ba:	e102      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2203      	movs	r2, #3
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	d10f      	bne.n	8006324 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006312:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006322:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d007      	beq.n	8006342 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634a:	d14b      	bne.n	80063e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Transmit+0xf6>
 8006354:	8afb      	ldrh	r3, [r7, #22]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d13e      	bne.n	80063d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	881a      	ldrh	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	1c9a      	adds	r2, r3, #2
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800637e:	e02b      	b.n	80063d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d112      	bne.n	80063b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	881a      	ldrh	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063b2:	e011      	b.n	80063d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b4:	f7fc fa4a 	bl	800284c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d803      	bhi.n	80063cc <HAL_SPI_Transmit+0x168>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d102      	bne.n	80063d2 <HAL_SPI_Transmit+0x16e>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063d6:	e074      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1ce      	bne.n	8006380 <HAL_SPI_Transmit+0x11c>
 80063e2:	e04c      	b.n	800647e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_SPI_Transmit+0x18e>
 80063ec:	8afb      	ldrh	r3, [r7, #22]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d140      	bne.n	8006474 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006418:	e02c      	b.n	8006474 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d113      	bne.n	8006450 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	86da      	strh	r2, [r3, #54]	; 0x36
 800644e:	e011      	b.n	8006474 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006450:	f7fc f9fc 	bl	800284c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d803      	bhi.n	8006468 <HAL_SPI_Transmit+0x204>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d102      	bne.n	800646e <HAL_SPI_Transmit+0x20a>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006472:	e026      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1cd      	bne.n	800641a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fbda 	bl	8006c3c <SPI_EndRxTxTransaction>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e000      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80064c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f8:	d112      	bne.n	8006520 <HAL_SPI_Receive+0x44>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10e      	bne.n	8006520 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2204      	movs	r2, #4
 8006506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f8f1 	bl	80066fe <HAL_SPI_TransmitReceive>
 800651c:	4603      	mov	r3, r0
 800651e:	e0ea      	b.n	80066f6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_SPI_Receive+0x52>
 800652a:	2302      	movs	r3, #2
 800652c:	e0e3      	b.n	80066f6 <HAL_SPI_Receive+0x21a>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006536:	f7fc f989 	bl	800284c <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d002      	beq.n	800654e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006548:	2302      	movs	r3, #2
 800654a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800654c:	e0ca      	b.n	80066e4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Receive+0x7e>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800655e:	e0c1      	b.n	80066e4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2204      	movs	r2, #4
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a6:	d10f      	bne.n	80065c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d007      	beq.n	80065e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d162      	bne.n	80066b4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065ee:	e02e      	b.n	800664e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d115      	bne.n	800662a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f103 020c 	add.w	r2, r3, #12
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	7812      	ldrb	r2, [r2, #0]
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006628:	e011      	b.n	800664e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800662a:	f7fc f90f 	bl	800284c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d803      	bhi.n	8006642 <HAL_SPI_Receive+0x166>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d102      	bne.n	8006648 <HAL_SPI_Receive+0x16c>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800664c:	e04a      	b.n	80066e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1cb      	bne.n	80065f0 <HAL_SPI_Receive+0x114>
 8006658:	e031      	b.n	80066be <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b01      	cmp	r3, #1
 8006666:	d113      	bne.n	8006690 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	b292      	uxth	r2, r2
 8006674:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	1c9a      	adds	r2, r3, #2
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800668e:	e011      	b.n	80066b4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006690:	f7fc f8dc 	bl	800284c <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d803      	bhi.n	80066a8 <HAL_SPI_Receive+0x1cc>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d102      	bne.n	80066ae <HAL_SPI_Receive+0x1d2>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066b2:	e017      	b.n	80066e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1cd      	bne.n	800665a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fa54 	bl	8006b70 <SPI_EndRxTransaction>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
 80066e0:	e000      	b.n	80066e4 <HAL_SPI_Receive+0x208>
  }

error :
 80066e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b08c      	sub	sp, #48	; 0x30
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800670c:	2301      	movs	r3, #1
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x26>
 8006720:	2302      	movs	r3, #2
 8006722:	e18a      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x33c>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800672c:	f7fc f88e 	bl	800284c <HAL_GetTick>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006742:	887b      	ldrh	r3, [r7, #2]
 8006744:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800674a:	2b01      	cmp	r3, #1
 800674c:	d00f      	beq.n	800676e <HAL_SPI_TransmitReceive+0x70>
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006754:	d107      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x68>
 800675e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006762:	2b04      	cmp	r3, #4
 8006764:	d003      	beq.n	800676e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006766:	2302      	movs	r3, #2
 8006768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800676c:	e15b      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x82>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x82>
 800677a:	887b      	ldrh	r3, [r7, #2]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006786:	e14e      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b04      	cmp	r3, #4
 8006792:	d003      	beq.n	800679c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2205      	movs	r2, #5
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	887a      	ldrh	r2, [r7, #2]
 80067ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	887a      	ldrh	r2, [r7, #2]
 80067b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	887a      	ldrh	r2, [r7, #2]
 80067be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d007      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f8:	d178      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_SPI_TransmitReceive+0x10a>
 8006802:	8b7b      	ldrh	r3, [r7, #26]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d166      	bne.n	80068d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682c:	e053      	b.n	80068d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b02      	cmp	r3, #2
 800683a:	d11b      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x176>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x176>
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d113      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b01      	cmp	r3, #1
 8006880:	d119      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x1b8>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d014      	beq.n	80068b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	b292      	uxth	r2, r2
 8006898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068b2:	2301      	movs	r3, #1
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068b6:	f7fb ffc9 	bl	800284c <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d807      	bhi.n	80068d6 <HAL_SPI_TransmitReceive+0x1d8>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d003      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068d4:	e0a7      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1a6      	bne.n	800682e <HAL_SPI_TransmitReceive+0x130>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1a1      	bne.n	800682e <HAL_SPI_TransmitReceive+0x130>
 80068ea:	e07c      	b.n	80069e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_SPI_TransmitReceive+0x1fc>
 80068f4:	8b7b      	ldrh	r3, [r7, #26]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d16b      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	7812      	ldrb	r2, [r2, #0]
 8006906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006920:	e057      	b.n	80069d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d11c      	bne.n	800696a <HAL_SPI_TransmitReceive+0x26c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d017      	beq.n	800696a <HAL_SPI_TransmitReceive+0x26c>
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d114      	bne.n	800696a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d119      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x2ae>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069a8:	2301      	movs	r3, #1
 80069aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069ac:	f7fb ff4e 	bl	800284c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d803      	bhi.n	80069c4 <HAL_SPI_TransmitReceive+0x2c6>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d102      	bne.n	80069ca <HAL_SPI_TransmitReceive+0x2cc>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d103      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069d0:	e029      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1a2      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x224>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d19d      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f926 	bl	8006c3c <SPI_EndRxTxTransaction>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a02:	e010      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	e000      	b.n	8006a26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3730      	adds	r7, #48	; 0x30
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a50:	b2db      	uxtb	r3, r3
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a70:	f7fb feec 	bl	800284c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	1a9b      	subs	r3, r3, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a80:	f7fb fee4 	bl	800284c <HAL_GetTick>
 8006a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a86:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	015b      	lsls	r3, r3, #5
 8006a8c:	0d1b      	lsrs	r3, r3, #20
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a96:	e054      	b.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d050      	beq.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aa0:	f7fb fed4 	bl	800284c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d902      	bls.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d13d      	bne.n	8006b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d111      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad8:	d004      	beq.n	8006ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae2:	d107      	bne.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afc:	d10f      	bne.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e017      	b.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d19b      	bne.n	8006a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000008 	.word	0x20000008

08006b70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b84:	d111      	bne.n	8006baa <SPI_EndRxTransaction+0x3a>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8e:	d004      	beq.n	8006b9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b98:	d107      	bne.n	8006baa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb2:	d12a      	bne.n	8006c0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbc:	d012      	beq.n	8006be4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2180      	movs	r1, #128	; 0x80
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff ff49 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	f043 0220 	orr.w	r2, r3, #32
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e026      	b.n	8006c32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2101      	movs	r1, #1
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff ff36 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01a      	beq.n	8006c30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e013      	b.n	8006c32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2200      	movs	r2, #0
 8006c12:	2101      	movs	r1, #1
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff ff23 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e000      	b.n	8006c32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c48:	4b1b      	ldr	r3, [pc, #108]	; (8006cb8 <SPI_EndRxTxTransaction+0x7c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <SPI_EndRxTxTransaction+0x80>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0d5b      	lsrs	r3, r3, #21
 8006c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c58:	fb02 f303 	mul.w	r3, r2, r3
 8006c5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c66:	d112      	bne.n	8006c8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fef4 	bl	8006a60 <SPI_WaitFlagStateUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d016      	beq.n	8006cac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e00f      	b.n	8006cae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d0f2      	beq.n	8006c8e <SPI_EndRxTxTransaction+0x52>
 8006ca8:	e000      	b.n	8006cac <SPI_EndRxTxTransaction+0x70>
        break;
 8006caa:	bf00      	nop
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000008 	.word	0x20000008
 8006cbc:	165e9f81 	.word	0x165e9f81

08006cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e03f      	b.n	8006d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fa fa6c 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2224      	movs	r2, #36	; 0x24
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f829 	bl	8006d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695a      	ldr	r2, [r3, #20]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d60:	b0c0      	sub	sp, #256	; 0x100
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d78:	68d9      	ldr	r1, [r3, #12]
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	ea40 0301 	orr.w	r3, r0, r1
 8006d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006db4:	f021 010c 	bic.w	r1, r1, #12
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	6999      	ldr	r1, [r3, #24]
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	ea40 0301 	orr.w	r3, r0, r1
 8006de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b8f      	ldr	r3, [pc, #572]	; (8007028 <UART_SetConfig+0x2cc>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d005      	beq.n	8006dfc <UART_SetConfig+0xa0>
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b8d      	ldr	r3, [pc, #564]	; (800702c <UART_SetConfig+0x2d0>)
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d104      	bne.n	8006e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dfc:	f7fe ff1c 	bl	8005c38 <HAL_RCC_GetPCLK2Freq>
 8006e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e04:	e003      	b.n	8006e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e06:	f7fe ff03 	bl	8005c10 <HAL_RCC_GetPCLK1Freq>
 8006e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e18:	f040 810c 	bne.w	8007034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e2e:	4622      	mov	r2, r4
 8006e30:	462b      	mov	r3, r5
 8006e32:	1891      	adds	r1, r2, r2
 8006e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e36:	415b      	adcs	r3, r3
 8006e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e3e:	4621      	mov	r1, r4
 8006e40:	eb12 0801 	adds.w	r8, r2, r1
 8006e44:	4629      	mov	r1, r5
 8006e46:	eb43 0901 	adc.w	r9, r3, r1
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e5e:	4690      	mov	r8, r2
 8006e60:	4699      	mov	r9, r3
 8006e62:	4623      	mov	r3, r4
 8006e64:	eb18 0303 	adds.w	r3, r8, r3
 8006e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	eb49 0303 	adc.w	r3, r9, r3
 8006e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	18db      	adds	r3, r3, r3
 8006e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e90:	4613      	mov	r3, r2
 8006e92:	eb42 0303 	adc.w	r3, r2, r3
 8006e96:	657b      	str	r3, [r7, #84]	; 0x54
 8006e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ea0:	f7f9 f9a4 	bl	80001ec <__aeabi_uldivmod>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4b61      	ldr	r3, [pc, #388]	; (8007030 <UART_SetConfig+0x2d4>)
 8006eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	011c      	lsls	r4, r3, #4
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	1891      	adds	r1, r2, r2
 8006eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ecc:	415b      	adcs	r3, r3
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8006eda:	4649      	mov	r1, r9
 8006edc:	eb43 0b01 	adc.w	fp, r3, r1
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef4:	4692      	mov	sl, r2
 8006ef6:	469b      	mov	fp, r3
 8006ef8:	4643      	mov	r3, r8
 8006efa:	eb1a 0303 	adds.w	r3, sl, r3
 8006efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f02:	464b      	mov	r3, r9
 8006f04:	eb4b 0303 	adc.w	r3, fp, r3
 8006f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f20:	460b      	mov	r3, r1
 8006f22:	18db      	adds	r3, r3, r3
 8006f24:	643b      	str	r3, [r7, #64]	; 0x40
 8006f26:	4613      	mov	r3, r2
 8006f28:	eb42 0303 	adc.w	r3, r2, r3
 8006f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f36:	f7f9 f959 	bl	80001ec <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4b3b      	ldr	r3, [pc, #236]	; (8007030 <UART_SetConfig+0x2d4>)
 8006f42:	fba3 2301 	umull	r2, r3, r3, r1
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	1acb      	subs	r3, r1, r3
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f56:	4b36      	ldr	r3, [pc, #216]	; (8007030 <UART_SetConfig+0x2d4>)
 8006f58:	fba3 2302 	umull	r2, r3, r3, r2
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f64:	441c      	add	r4, r3
 8006f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	1891      	adds	r1, r2, r2
 8006f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f80:	415b      	adcs	r3, r3
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f88:	4641      	mov	r1, r8
 8006f8a:	1851      	adds	r1, r2, r1
 8006f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8006f8e:	4649      	mov	r1, r9
 8006f90:	414b      	adcs	r3, r1
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	00cb      	lsls	r3, r1, #3
 8006fa4:	4651      	mov	r1, sl
 8006fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006faa:	4651      	mov	r1, sl
 8006fac:	00ca      	lsls	r2, r1, #3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	eb42 0303 	adc.w	r3, r2, r3
 8006fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fdc:	460b      	mov	r3, r1
 8006fde:	18db      	adds	r3, r3, r3
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	eb42 0303 	adc.w	r3, r2, r3
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ff2:	f7f9 f8fb 	bl	80001ec <__aeabi_uldivmod>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <UART_SetConfig+0x2d4>)
 8006ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	2164      	movs	r1, #100	; 0x64
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	3332      	adds	r3, #50	; 0x32
 800700e:	4a08      	ldr	r2, [pc, #32]	; (8007030 <UART_SetConfig+0x2d4>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	f003 0207 	and.w	r2, r3, #7
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4422      	add	r2, r4
 8007022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007024:	e105      	b.n	8007232 <UART_SetConfig+0x4d6>
 8007026:	bf00      	nop
 8007028:	40011000 	.word	0x40011000
 800702c:	40011400 	.word	0x40011400
 8007030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007038:	2200      	movs	r2, #0
 800703a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800703e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	1891      	adds	r1, r2, r2
 800704c:	6239      	str	r1, [r7, #32]
 800704e:	415b      	adcs	r3, r3
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
 8007052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007056:	4641      	mov	r1, r8
 8007058:	1854      	adds	r4, r2, r1
 800705a:	4649      	mov	r1, r9
 800705c:	eb43 0501 	adc.w	r5, r3, r1
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	00eb      	lsls	r3, r5, #3
 800706a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800706e:	00e2      	lsls	r2, r4, #3
 8007070:	4614      	mov	r4, r2
 8007072:	461d      	mov	r5, r3
 8007074:	4643      	mov	r3, r8
 8007076:	18e3      	adds	r3, r4, r3
 8007078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800707c:	464b      	mov	r3, r9
 800707e:	eb45 0303 	adc.w	r3, r5, r3
 8007082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070a2:	4629      	mov	r1, r5
 80070a4:	008b      	lsls	r3, r1, #2
 80070a6:	4621      	mov	r1, r4
 80070a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ac:	4621      	mov	r1, r4
 80070ae:	008a      	lsls	r2, r1, #2
 80070b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070b4:	f7f9 f89a 	bl	80001ec <__aeabi_uldivmod>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4b60      	ldr	r3, [pc, #384]	; (8007240 <UART_SetConfig+0x4e4>)
 80070be:	fba3 2302 	umull	r2, r3, r3, r2
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	011c      	lsls	r4, r3, #4
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	61b9      	str	r1, [r7, #24]
 80070e0:	415b      	adcs	r3, r3
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070e8:	4641      	mov	r1, r8
 80070ea:	1851      	adds	r1, r2, r1
 80070ec:	6139      	str	r1, [r7, #16]
 80070ee:	4649      	mov	r1, r9
 80070f0:	414b      	adcs	r3, r1
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007100:	4659      	mov	r1, fp
 8007102:	00cb      	lsls	r3, r1, #3
 8007104:	4651      	mov	r1, sl
 8007106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710a:	4651      	mov	r1, sl
 800710c:	00ca      	lsls	r2, r1, #3
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	4603      	mov	r3, r0
 8007114:	4642      	mov	r2, r8
 8007116:	189b      	adds	r3, r3, r2
 8007118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800711c:	464b      	mov	r3, r9
 800711e:	460a      	mov	r2, r1
 8007120:	eb42 0303 	adc.w	r3, r2, r3
 8007124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	67bb      	str	r3, [r7, #120]	; 0x78
 8007132:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007140:	4649      	mov	r1, r9
 8007142:	008b      	lsls	r3, r1, #2
 8007144:	4641      	mov	r1, r8
 8007146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800714a:	4641      	mov	r1, r8
 800714c:	008a      	lsls	r2, r1, #2
 800714e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007152:	f7f9 f84b 	bl	80001ec <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b39      	ldr	r3, [pc, #228]	; (8007240 <UART_SetConfig+0x4e4>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	; 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a34      	ldr	r2, [pc, #208]	; (8007240 <UART_SetConfig+0x4e4>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800717a:	441c      	add	r4, r3
 800717c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007180:	2200      	movs	r2, #0
 8007182:	673b      	str	r3, [r7, #112]	; 0x70
 8007184:	677a      	str	r2, [r7, #116]	; 0x74
 8007186:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800718a:	4642      	mov	r2, r8
 800718c:	464b      	mov	r3, r9
 800718e:	1891      	adds	r1, r2, r2
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	415b      	adcs	r3, r3
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800719a:	4641      	mov	r1, r8
 800719c:	1851      	adds	r1, r2, r1
 800719e:	6039      	str	r1, [r7, #0]
 80071a0:	4649      	mov	r1, r9
 80071a2:	414b      	adcs	r3, r1
 80071a4:	607b      	str	r3, [r7, #4]
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071b2:	4659      	mov	r1, fp
 80071b4:	00cb      	lsls	r3, r1, #3
 80071b6:	4651      	mov	r1, sl
 80071b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071bc:	4651      	mov	r1, sl
 80071be:	00ca      	lsls	r2, r1, #3
 80071c0:	4610      	mov	r0, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	4603      	mov	r3, r0
 80071c6:	4642      	mov	r2, r8
 80071c8:	189b      	adds	r3, r3, r2
 80071ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80071cc:	464b      	mov	r3, r9
 80071ce:	460a      	mov	r2, r1
 80071d0:	eb42 0303 	adc.w	r3, r2, r3
 80071d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	663b      	str	r3, [r7, #96]	; 0x60
 80071e0:	667a      	str	r2, [r7, #100]	; 0x64
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071ee:	4649      	mov	r1, r9
 80071f0:	008b      	lsls	r3, r1, #2
 80071f2:	4641      	mov	r1, r8
 80071f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f8:	4641      	mov	r1, r8
 80071fa:	008a      	lsls	r2, r1, #2
 80071fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007200:	f7f8 fff4 	bl	80001ec <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <UART_SetConfig+0x4e4>)
 800720a:	fba3 1302 	umull	r1, r3, r3, r2
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	2164      	movs	r1, #100	; 0x64
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	3332      	adds	r3, #50	; 0x32
 800721c:	4a08      	ldr	r2, [pc, #32]	; (8007240 <UART_SetConfig+0x4e4>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4422      	add	r2, r4
 8007230:	609a      	str	r2, [r3, #8]
}
 8007232:	bf00      	nop
 8007234:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007238:	46bd      	mov	sp, r7
 800723a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723e:	bf00      	nop
 8007240:	51eb851f 	.word	0x51eb851f

08007244 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d123      	bne.n	800729e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800725e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	6851      	ldr	r1, [r2, #4]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	6892      	ldr	r2, [r2, #8]
 800726a:	4311      	orrs	r1, r2
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	68d2      	ldr	r2, [r2, #12]
 8007270:	4311      	orrs	r1, r2
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6912      	ldr	r2, [r2, #16]
 8007276:	4311      	orrs	r1, r2
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	6952      	ldr	r2, [r2, #20]
 800727c:	4311      	orrs	r1, r2
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	6992      	ldr	r2, [r2, #24]
 8007282:	4311      	orrs	r1, r2
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	69d2      	ldr	r2, [r2, #28]
 8007288:	4311      	orrs	r1, r2
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	6a12      	ldr	r2, [r2, #32]
 800728e:	4311      	orrs	r1, r2
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007294:	430a      	orrs	r2, r1
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e028      	b.n	80072f0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	69d9      	ldr	r1, [r3, #28]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	4319      	orrs	r1, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	430b      	orrs	r3, r1
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	6851      	ldr	r1, [r2, #4]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	6892      	ldr	r2, [r2, #8]
 80072d0:	4311      	orrs	r1, r2
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	68d2      	ldr	r2, [r2, #12]
 80072d6:	4311      	orrs	r1, r2
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	6912      	ldr	r2, [r2, #16]
 80072dc:	4311      	orrs	r1, r2
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	6952      	ldr	r2, [r2, #20]
 80072e2:	4311      	orrs	r1, r2
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	6992      	ldr	r2, [r2, #24]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d128      	bne.n	8007362 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	1e59      	subs	r1, r3, #1
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	3b01      	subs	r3, #1
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	4319      	orrs	r1, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	3b01      	subs	r3, #1
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	4319      	orrs	r1, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	3b01      	subs	r3, #1
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	4319      	orrs	r1, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	3b01      	subs	r3, #1
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	4319      	orrs	r1, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	3b01      	subs	r3, #1
 800734c:	051b      	lsls	r3, r3, #20
 800734e:	4319      	orrs	r1, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	3b01      	subs	r3, #1
 8007356:	061b      	lsls	r3, r3, #24
 8007358:	430b      	orrs	r3, r1
 800735a:	431a      	orrs	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]
 8007360:	e02f      	b.n	80073c2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800736a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	68d2      	ldr	r2, [r2, #12]
 8007372:	3a01      	subs	r2, #1
 8007374:	0311      	lsls	r1, r2, #12
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	6952      	ldr	r2, [r2, #20]
 800737a:	3a01      	subs	r2, #1
 800737c:	0512      	lsls	r2, r2, #20
 800737e:	430a      	orrs	r2, r1
 8007380:	431a      	orrs	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	1e59      	subs	r1, r3, #1
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	4319      	orrs	r1, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	4319      	orrs	r1, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4319      	orrs	r1, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	430b      	orrs	r3, r1
 80073bc:	431a      	orrs	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	0d9b      	lsrs	r3, r3, #22
 80073e6:	059b      	lsls	r3, r3, #22
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	6811      	ldr	r1, [r2, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	6852      	ldr	r2, [r2, #4]
 80073f0:	4311      	orrs	r1, r2
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	6892      	ldr	r2, [r2, #8]
 80073f6:	3a01      	subs	r2, #1
 80073f8:	0152      	lsls	r2, r2, #5
 80073fa:	4311      	orrs	r1, r2
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	68d2      	ldr	r2, [r2, #12]
 8007400:	0252      	lsls	r2, r2, #9
 8007402:	430a      	orrs	r2, r1
 8007404:	431a      	orrs	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800740a:	f7fb fa1f 	bl	800284c <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007410:	e010      	b.n	8007434 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d00c      	beq.n	8007434 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <FMC_SDRAM_SendCommand+0x60>
 8007420:	f7fb fa14 	bl	800284c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d201      	bcs.n	8007434 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e006      	b.n	8007442 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b20      	cmp	r3, #32
 800743e:	d0e8      	beq.n	8007412 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800745c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	0052      	lsls	r2, r2, #1
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <__libc_init_array>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4d0d      	ldr	r5, [pc, #52]	; (80074b0 <__libc_init_array+0x38>)
 800747c:	4c0d      	ldr	r4, [pc, #52]	; (80074b4 <__libc_init_array+0x3c>)
 800747e:	1b64      	subs	r4, r4, r5
 8007480:	10a4      	asrs	r4, r4, #2
 8007482:	2600      	movs	r6, #0
 8007484:	42a6      	cmp	r6, r4
 8007486:	d109      	bne.n	800749c <__libc_init_array+0x24>
 8007488:	4d0b      	ldr	r5, [pc, #44]	; (80074b8 <__libc_init_array+0x40>)
 800748a:	4c0c      	ldr	r4, [pc, #48]	; (80074bc <__libc_init_array+0x44>)
 800748c:	f000 f820 	bl	80074d0 <_init>
 8007490:	1b64      	subs	r4, r4, r5
 8007492:	10a4      	asrs	r4, r4, #2
 8007494:	2600      	movs	r6, #0
 8007496:	42a6      	cmp	r6, r4
 8007498:	d105      	bne.n	80074a6 <__libc_init_array+0x2e>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a0:	4798      	blx	r3
 80074a2:	3601      	adds	r6, #1
 80074a4:	e7ee      	b.n	8007484 <__libc_init_array+0xc>
 80074a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074aa:	4798      	blx	r3
 80074ac:	3601      	adds	r6, #1
 80074ae:	e7f2      	b.n	8007496 <__libc_init_array+0x1e>
 80074b0:	08009eac 	.word	0x08009eac
 80074b4:	08009eac 	.word	0x08009eac
 80074b8:	08009eac 	.word	0x08009eac
 80074bc:	08009eb0 	.word	0x08009eb0

080074c0 <memset>:
 80074c0:	4402      	add	r2, r0
 80074c2:	4603      	mov	r3, r0
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d100      	bne.n	80074ca <memset+0xa>
 80074c8:	4770      	bx	lr
 80074ca:	f803 1b01 	strb.w	r1, [r3], #1
 80074ce:	e7f9      	b.n	80074c4 <memset+0x4>

080074d0 <_init>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr

080074dc <_fini>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	bf00      	nop
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr
